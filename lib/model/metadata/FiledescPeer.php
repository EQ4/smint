<?php


/**
 * Skeleton subclass for performing query and update operations on the 'filedesc' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Aug 24 09:55:59 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.metadata
 */
class FiledescPeer extends BaseFiledescPeer {
  
  static public function retrieveForSelect($q, $limit, $columnname)
  {
    $criteria = new Criteria();
    $criteria->add( constant('FiledescPeer::'.strtoupper($columnname) ), '%'.$q.'%', Criteria::LIKE);
    $criteria->setDistinct(true);
    $criteria->addAscendingOrderByColumn( constant('FiledescPeer::'.strtoupper($columnname)) );
    $criteria->setLimit($limit);
    $criteria->setIgnoreCase(true);
 
    $values = array();
    $getFunctionKey = "get$columnname";
    $getFunctionValue = "get$columnname";
    $result = FiledescPeer::doSelect($criteria); 
    
    foreach ( $result as $value)
    { 
      $current_result = array();
      $current_result["id"] = (string) $value->$getFunctionValue();
      $current_result["label"] = (string) $value->$getFunctionValue();
      $current_result["value"] = (string) $value->$getFunctionValue();
      $values[] = $current_result;
    }
    return $values;
  }    
  
    /**
     * returns Genre Values in an array (id, Name ( Count(Genre) )) e.g. Rock (33)
     * to be uses for sfWidgetFormChoice
     * 
     * @return array 
     * @author jochum
     */
  static public function getGenreWithCounts() {
    $c = new Criteria();
    $c->addGroupByColumn(FiledescPeer::GENRE);
    $c->addSelectColumn(FiledescPeer::GENRE);
    $c->addAsColumn('numGenre', 'COUNT('.FiledescPeer::GENRE.')');
    $c->addDescendingOrderByColumn('numGenre');
    $values = array( "" => "" );  //add empty 
    foreach (FiledescPeer::doSelectStmt($c)->fetchAll() as $key => $rs) {
      $values[$rs[0]] = $rs[0]." (".$rs[1].")";
    }
    return $values;    
    
  }

    /**
     * returns Subenre Values in an array (id, Name ( Count(Genre) )) e.g. Rock (33)
     * to be uses for sfWidgetFormChoice
     * 
     * @return array 
     * @author jochum
     */
  static public function getSubgenreWithCounts() {
    $c = new Criteria();
    $c->addGroupByColumn(FiledescPeer::SUBGENRE);
    $c->addSelectColumn(FiledescPeer::SUBGENRE);
    $c->addAsColumn('numGenre', 'COUNT('.FiledescPeer::SUBGENRE.')');
    $c->addDescendingOrderByColumn('numGenre');
    $values = array( "" => "" );  //add empty 
    foreach (FiledescPeer::doSelectStmt($c)->fetchAll() as $key => $rs) {
      $values[$rs[0]] = $rs[0]." (".$rs[1].")";
    }
    return $values;    
    
  }


    /**
     * returns genre_sm Values in an array (id, Name ( Count(genre_sm) )) e.g. Rock (33)
     * to be uses for sfWidgetFormChoice
     * 
     * @return array 
     * @author jochum
     */
  static public function getGenreSmWithCounts() {
    
    $c = new Criteria();
    $c->addGroupByColumn(FiledescPeer::GENRE_SM);
    $c->addSelectColumn(FiledescPeer::GENRE_SM);
    $c->addAsColumn('numGenre', 'COUNT('.FiledescPeer::GENRE_SM.')');
    $c->addDescendingOrderByColumn('numGenre');
    $values = array( "" => "" );  //add empty 
    foreach (FiledescPeer::doSelectStmt($c)->fetchAll() as $key => $rs) {
      $values[$rs[0]] = $rs[0]." (".$rs[1].")";
    }
    return $values;    
    
  }

    /**
     * returns genre_sm Values in an array (id, Name ( Count(genre_sm) )) e.g. Rock (33)
     * to be uses for sfWidgetFormChoice
     * 
     * @return array 
     * @author jochum
     */
  static public function getGenreSm2WithCounts() {
    
    $c = new Criteria();
    $c->addGroupByColumn(FiledescPeer::GENRE_SM2);
    $c->addSelectColumn(FiledescPeer::GENRE_SM2);
    $c->addAsColumn('numGenre', 'COUNT('.FiledescPeer::GENRE_SM2.')');
    $c->addDescendingOrderByColumn('numGenre');
    $values = array( "" => "" );  //add empty 
    foreach (FiledescPeer::doSelectStmt($c)->fetchAll() as $key => $rs) {
      $values[$rs[0]] = $rs[0]." (".$rs[1].")";
    }
    return $values;    
    
  }

} // FiledescPeer

<?php


/**
 * Skeleton subclass for performing query and update operations on the 'smint_querycomment_track' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Aug 24 09:56:03 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.userLogging
 */
class QueryCommentTrackPeer extends BaseQueryCommentTrackPeer {

  
  static public function updateTextComment(
    $feedbacktext,
    $querytrackid,
    $resulttrackid,
    $resultposition,
    $featurevectortypeid,
    $distancetypeid) 
  {
    $user=sfContext::getInstance()->getUser();
    
    // get querycomment
    $comment = QueryCommentPeer::getComment($querytrackid, $featurevectortypeid, $distancetypeid); 
    
    // create/update querycomment_track
    $commentTrack = self::getCommentTrackByCommentId( $comment->getId(), $resulttrackid );
    $commentTrack->setResultposition($resultposition);
    $commentTrack->setComment($feedbacktext);
    $commentTrack->save();
  }
  
  static public function updateRating(
    $rating,
    $querytrackid,
    $resulttrackid,
    $resultposition,
    $featurevectortypeid,
    $distancetypeid) 
  {
    $user=sfContext::getInstance()->getUser();
    
    // get querycomment
    $comment = QueryCommentPeer::getComment($querytrackid, $featurevectortypeid, $distancetypeid); 
    
    // create/update querycomment_track
    $commentTrack = self::getCommentTrackByCommentId( $comment->getId(), $resulttrackid );
    $commentTrack->setResultposition($resultposition);
    $commentTrack->setRating($rating);
    $commentTrack->save();
  }
  
  /**
   * function that returns a track record to a query comment
   * 
   * by Default it will create a new record if none exists, set autoCreate to false if no new entry should be created
   *
   * @author jochum
   */
  static public function getCommentTrackByCommentId(
    $commentid,
    $resulttrackid,
    $autoCreate=true) 
  {
    $criteria = new Criteria();
    $criteria->add(QueryCommentTrackPeer::SMINT_QUERYCOMMENT_ID, $commentid);    
    $criteria->add(QueryCommentTrackPeer::RESULTTRACKID, $resulttrackid);    
    
    // get querycomment
    $commentTrack = QueryCommentTrackPeer::doSelectOne($criteria);
    
    // create if querycommenttrack does not exist already 
    if (is_null($commentTrack) && $autoCreate) {
      $commentTrack = new QueryCommentTrack();
      $commentTrack->setSmintQuerycommentId($commentid);
      $commentTrack->setResulttrackid($resulttrackid);
      $commentTrack->save(); 
    }
    
    return $commentTrack; 
  }
  
  static public function getCommentTrack(
    $querytrackid,
    $resulttrackid,
    $resultposition,
    $featurevectortypeid,
    $distancetypeid) 
  {
    // get querycomment
    $comment = QueryCommentPeer::getComment($querytrackid, $featurevectortypeid, $distancetypeid); 
    // get querycomment_track
    $commentTrack = self::getCommentTrackByCommentId( $comment->getId(), $resulttrackid, false );
    return $commentTrack; 
  }
  

  static public function getComment(
    $querytrackid,
    $resulttrackid,
    $resultposition,
    $featurevectortypeid,
    $distancetypeid) 
  {
    $comment = self::getCommentTrack( $querytrackid, $resulttrackid, $resultposition, $featurevectortypeid, $distancetypeid );
    $comment = (is_null($comment)) ? null : $comment->getComment() ;
    return  $comment;
  }
  
  static public function getRating(
    $querytrackid,
    $resulttrackid,
    $resultposition,
    $featurevectortypeid,
    $distancetypeid) 
  {
    $rating = self::getCommentTrack( $querytrackid, $resulttrackid, $resultposition, $featurevectortypeid, $distancetypeid ); 
    $rating = (is_null($rating)) ? null : $rating->getRating() ;
    return $rating;
  }
  
  
  static public function getOthersCommentTracks(
    $querytrackid,
    $resulttrackid,
    $resultposition,
    $featurevectortypeid,
    $distancetypeid) 
  {
    $comments = QueryCommentPeer::getOthersComments($querytrackid, $featurevectortypeid, $distancetypeid); 
    $commentTracks = array();
    foreach ($comments as $key => $comment) {
      $theComment = self::getCommentTrackByCommentId( $comment->getId(), $resulttrackid , false); 
      if ( !is_null($theComment) ) {
        $commentTracks[] = $theComment;
      }
    }
    return $commentTracks; 
  }
  
  


} // QueryCommentTrackPeer

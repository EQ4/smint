<?php


/**
 * Skeleton subclass for performing query and update operations on the 'smint_querycomment' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Aug 24 09:56:03 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model.userLogging
 */
class QueryCommentPeer extends BaseQueryCommentPeer {

    static public function getComment(
      $querytrackid,
      $featurevectortypeid,
      $distancetypeid,
      $userid = null) 
    {
      if ($userid === null) 
      {
        $user=sfContext::getInstance()->getUser();
        $userid = $user->getAttribute('userid');      
      }


      $criteria = new Criteria();
      $criteria->add(QueryCommentPeer::SMINT_USER_ID, $userid);    
      $criteria->add(QueryCommentPeer::QUERYTRACKID, $querytrackid);    
      $criteria->add(QueryCommentPeer::FEATUREVECTORTYPEID, $featurevectortypeid);    
      $criteria->add(QueryCommentPeer::DISTANCETYPEID, $distancetypeid);    

      // get querycomment
      $comment = QueryCommentPeer::doSelectOne($criteria);

      // create if querycomment does not exist already 
      if (is_null($comment)) {
        $comment = new QueryComment();
        $comment->setSmintUserId($userid);
        $comment->setQuerytrackid($querytrackid);
        $comment->setFeaturevectortypeid($featurevectortypeid);
        $comment->setDistancetypeid($distancetypeid);
        $comment->save(); 
      }

      return $comment; 
    }


  /**
   * Function gets all comments of all other users (expect the current/given user)
   *
   * @author jochum
   */
    static public function getOthersComments(
      $querytrackid,
      $featurevectortypeid,
      $distancetypeid,
      $userid = null) 
    {
      if ($userid === null) 
      {
        $user=sfContext::getInstance()->getUser();
        $userid = $user->getAttribute('userid');      
      }

      $criteria = new Criteria();
      $criteria->add(QueryCommentPeer::SMINT_USER_ID, $userid, Criteria::NOT_EQUAL);    
      $criteria->add(QueryCommentPeer::QUERYTRACKID, $querytrackid);    
      $criteria->add(QueryCommentPeer::FEATUREVECTORTYPEID, $featurevectortypeid);    
      $criteria->add(QueryCommentPeer::DISTANCETYPEID, $distancetypeid);    

      // get querycomments
      $comments = QueryCommentPeer::doSelect($criteria);

      return $comments; 
    }





} // QueryCommentPeer

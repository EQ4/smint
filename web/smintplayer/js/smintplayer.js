/*
 # User interface model for seed area player and segment selection
 # 0: default (2 bars, zooming)
 # 1: simplified (1 bar, no zooming)
 */

var seedsong_uimodel = 1;

/*
 *  SmintPlayer
 *	(c) 2012 Spectralmind
 *
 *	Authors: Peter Olah
 *
 *
 *
 * ------------------------------------------------------------------------
 *
 * SmintPlayer has been based on jPlayer
 *
 * (original copyright message:
 *
 *
 * jPlayer Plugin for jQuery JavaScript Library
 * http://www.jplayer.org
 *
 * Copyright (c) 2009 - 2011 Happyworm Ltd
 * Dual licensed under the MIT and GPL licenses.
 *  - http://www.opensource.org/licenses/mit-license.php
 *  - http://www.gnu.org/copyleft/gpl.html
 *
 * Author: Mark J Panaghiston
 * Version: 2.1.0
 * Date: 1st September 2011
 */

/* Code verified using http://www.jshint.com/ */
/*jshint asi:false, bitwise:false, boss:false, browser:true, curly:true, debug:false, eqeqeq:true, eqnull:false, evil:false, forin:false, immed:false, jquery:true, laxbreak:false, newcap:true, noarg:true, noempty:true, nonew:true, nomem:false, onevar:false, passfail:false, plusplus:false, regexp:false, undef:true, sub:false, strict:false, white:false */
/*global jQuery:false, ActiveXObject:false, alert:false */

(function($, undefined) {

	// Adapted from jquery.ui.widget.js (1.8.7): $.widget.bridge
	$.fn.jPlayer = function(options) {
		var name = "jPlayer";
		var isMethodCall = typeof options === "string", args = Array.prototype.slice.call(arguments, 1), returnValue = this;

		// allow multiple hashes to be passed on init
		options = !isMethodCall && args.length ? $.extend.apply(null, [true, options].concat(args)) : options;

		// prevent calls to internal methods
		if(isMethodCall && options.charAt(0) === "_") {
			return returnValue;
		}

		if(isMethodCall) {
			this.each(function() {
				var instance = $.data(this, name), methodValue = instance && $.isFunction(instance[options]) ? instance[options].apply(instance, args) : instance;
				if(methodValue !== instance && methodValue !== undefined) {
					returnValue = methodValue;
					return false;
				}
			});
		} else {
			this.each(function() {
				var instance = $.data(this, name);
				if(instance) {
					// instance.option( options || {} )._init(); // Orig jquery.ui.widget.js code: Not recommend for jPlayer. ie., Applying new options to an existing instance (via the jPlayer constructor) and performing the _init(). The _init() is what concerns me. It would leave a lot of event handlers acting on jPlayer instance and the interface.
					instance.option(options || {});
					// The new constructor only changes the options. Changing options only has basic support atm.
				} else {
					$.data(this, name, new $.jPlayer(options, this));
				}
			});
		}

		return returnValue;
	};

	$.jPlayer = function(options, element) {
		// allow instantiation without initializing for simple inheritance
		if(arguments.length) {
			this.element = $(element);
			this.options = $.extend(true, {}, this.options, options);
			var self = this;
			this.element.bind("remove.jPlayer", function() {
				self.destroy();
			});
			this._init();
		}
	};
	// End of: (Adapted from jquery.ui.widget.js (1.8.7))

	// Emulated HTML5 methods and properties
	$.jPlayer.emulateMethods = "load play pause";
	$.jPlayer.emulateStatus = "src readyState networkState currentTime duration paused ended playbackRate";
	$.jPlayer.emulateOptions = "muted volume";

	// Reserved event names generated by jPlayer that are not part of the HTML5 Media element spec
	$.jPlayer.reservedEvent = "ready flashreset resize repeat error warning";

	// Events generated by jPlayer
	$.jPlayer.event = {
		ready : "jPlayer_ready",
		flashreset : "jPlayer_flashreset", // Similar to the ready event if the Flash solution is set to display:none and then shown again or if it's reloaded for another reason by the browser. For example, using CSS position:fixed on Firefox for the full screen feature.
		resize : "jPlayer_resize", // Occurs when the size changes through a full/restore screen operation or if the size/sizeFull options are changed.
		repeat : "jPlayer_repeat", // Occurs when the repeat status changes. Usually through clicks on the repeat button of the interface.
		click : "jPlayer_click", // Occurs when the user clicks on one of the following: poster image, html video, flash video.
		error : "jPlayer_error", // Event error code in event.jPlayer.error.type. See $.jPlayer.error
		warning : "jPlayer_warning", // Event warning code in event.jPlayer.warning.type. See $.jPlayer.warning

		// Other events match HTML5 spec.
		loadstart : "jPlayer_loadstart",
		progress : "jPlayer_progress",
		suspend : "jPlayer_suspend",
		abort : "jPlayer_abort",
		emptied : "jPlayer_emptied",
		stalled : "jPlayer_stalled",
		play : "jPlayer_play",
		pause : "jPlayer_pause",
		loadedmetadata : "jPlayer_loadedmetadata",
		loadeddata : "jPlayer_loadeddata",
		waiting : "jPlayer_waiting",
		playing : "jPlayer_playing",
		canplay : "jPlayer_canplay",
		canplaythrough : "jPlayer_canplaythrough",
		seeking : "jPlayer_seeking",
		seeked : "jPlayer_seeked",
		timeupdate : "jPlayer_timeupdate",
		ended : "jPlayer_ended",
		ratechange : "jPlayer_ratechange",
		durationchange : "jPlayer_durationchange",
		volumechange : "jPlayer_volumechange"
	};

	$.jPlayer.htmlEvent = [// These HTML events are bubbled through to the jPlayer event, without any internal action.
	"loadstart",
	// "progress", // jPlayer uses internally before bubbling.
	// "suspend", // jPlayer uses internally before bubbling.
	"abort",
	// "error", // jPlayer uses internally before bubbling.
	"emptied", "stalled",
	// "play", // jPlayer uses internally before bubbling.
	// "pause", // jPlayer uses internally before bubbling.
	"loadedmetadata", "loadeddata",
	// "waiting", // jPlayer uses internally before bubbling.
	// "playing", // jPlayer uses internally before bubbling.
	"canplay", "canplaythrough",
	// "seeking", // jPlayer uses internally before bubbling.
	// "seeked", // jPlayer uses internally before bubbling.
	// "timeupdate", // jPlayer uses internally before bubbling.
	// "ended", // jPlayer uses internally before bubbling.
	"ratechange"
	// "durationchange" // jPlayer uses internally before bubbling.
	// "volumechange" // jPlayer uses internally before bubbling.
	];

	$.jPlayer.pause = function() {
		$.each($.jPlayer.prototype.instances, function(i, element) {
			if(element.data("jPlayer").status.srcSet) {// Check that media is set otherwise would cause error event.
				element.jPlayer("pause");
			}
		});
	};

	$.jPlayer.timeFormat = {
		showHour : false,
		showMin : true,
		showSec : true,
		padHour : false,
		padMin : true,
		padSec : true,
		sepHour : ":",
		sepMin : ":",
		sepSec : ""
	};

	$.jPlayer.convertTime = function(s) {
		var myTime = new Date(s * 1000);
		var hour = myTime.getUTCHours();
		var min = myTime.getUTCMinutes();
		var sec = myTime.getUTCSeconds();
		var strHour = ($.jPlayer.timeFormat.padHour && hour < 10) ? "0" + hour : hour;
		var strMin = ($.jPlayer.timeFormat.padMin && min < 10) ? "0" + min : min;
		var strSec = ($.jPlayer.timeFormat.padSec && sec < 10) ? "0" + sec : sec;
		return (($.jPlayer.timeFormat.showHour) ? strHour + $.jPlayer.timeFormat.sepHour : "") + (($.jPlayer.timeFormat.showMin) ? strMin + $.jPlayer.timeFormat.sepMin : "") + (($.jPlayer.timeFormat.showSec) ? strSec + $.jPlayer.timeFormat.sepSec : "");
	};
	// Adapting jQuery 1.4.4 code for jQuery.browser. Required since jQuery 1.3.2 does not detect Chrome as webkit.
	$.jPlayer.uaBrowser = function(userAgent) {
		var ua = userAgent.toLowerCase();

		// Useragent RegExp
		var rwebkit = /(webkit)[ \/]([\w.]+)/;
		var ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/;
		var rmsie = /(msie) ([\w.]+)/;
		var rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/;

		var match = rwebkit.exec(ua) || ropera.exec(ua) || rmsie.exec(ua) || ua.indexOf("compatible") < 0 && rmozilla.exec(ua) || [];

		return {
			browser : match[1] || "",
			version : match[2] || "0"
		};
	};
	// Platform sniffer for detecting mobile devices
	$.jPlayer.uaPlatform = function(userAgent) {
		var ua = userAgent.toLowerCase();

		// Useragent RegExp
		var rplatform = /(ipad|iphone|ipod|android|blackberry|playbook|windows ce|webos)/;
		var rtablet = /(ipad|playbook)/;
		var randroid = /(android)/;
		var rmobile = /(mobile)/;

		var platform = rplatform.exec(ua) || [];
		var tablet = rtablet.exec(ua) || !rmobile.exec(ua) && randroid.exec(ua) || [];

		if(platform[1]) {
			platform[1] = platform[1].replace(/\s/g, "_");
			// Change whitespace to underscore. Enables dot notation.
		}

		return {
			platform : platform[1] || "",
			tablet : tablet[1] || ""
		};
	};

	$.jPlayer.browser = {
	};
	$.jPlayer.platform = {
	};

	var browserMatch = $.jPlayer.uaBrowser(navigator.userAgent);
	if(browserMatch.browser) {
		$.jPlayer.browser[browserMatch.browser] = true;
		$.jPlayer.browser.version = browserMatch.version;
	}
	var platformMatch = $.jPlayer.uaPlatform(navigator.userAgent);
	if(platformMatch.platform) {
		$.jPlayer.platform[platformMatch.platform] = true;
		$.jPlayer.platform.mobile = !platformMatch.tablet;
		$.jPlayer.platform.tablet = !!platformMatch.tablet;
	}

	$.jPlayer.prototype = {
		count : 0, // Static Variable: Change it via prototype.
		version : {// Static Object
			script : "2.1.0",
			needFlash : "2.1.0",
			flash : "unknown"
		},
		options : {// Instanced in $.jPlayer() constructor
			swfPath : "js", // Path to Jplayer.swf. Can be relative, absolute or server root relative.
			solution : "html, flash", // Valid solutions: html, flash. Order defines priority. 1st is highest,
			supplied : "mp3", // Defines which formats jPlayer will try and support and the priority by the order. 1st is highest,
			preload : 'metadata', // HTML5 Spec values: none, metadata, auto.
			volume : 0.8, // The volume. Number 0 to 1.
			muted : false,
			wmode : "opaque", // Valid wmode: window, transparent, opaque, direct, gpu.
			backgroundColor : "#000000", // To define the jPlayer div and Flash background color.
			cssSelectorAncestor : "#jp_container_1",
			cssSelector : {// * denotes properties that should only be required when video media type required. _cssSelector() would require changes to enable splitting these into Audio and Video defaults.
				videoPlay : ".jp-video-play", // *
				play : ".jp-play",
				pause : ".jp-pause",
				stop : ".jp-stop",
				seekBar : ".jp-seek-bar",
				playBar : ".jp-play-bar",
				mute : ".jp-mute",
				unmute : ".jp-unmute",
				volumeBar : ".jp-volume-bar",
				volumeBarValue : ".jp-volume-bar-value",
				volumeMax : ".jp-volume-max",
				currentTime : ".jp-current-time",
				duration : ".jp-duration",
				fullScreen : ".jp-full-screen", // *
				restoreScreen : ".jp-restore-screen", // *
				repeat : ".jp-repeat",
				repeatOff : ".jp-repeat-off",
				gui : ".jp-gui", // The interface used with autohide feature.
				noSolution : ".jp-no-solution" // For error feedback when jPlayer cannot find a solution.
			},
			fullScreen : false,
			autohide : {
				restored : false, // Controls the interface autohide feature.
				full : true, // Controls the interface autohide feature.
				fadeIn : 200, // Milliseconds. The period of the fadeIn anim.
				fadeOut : 600, // Milliseconds. The period of the fadeOut anim.
				hold : 1000 // Milliseconds. The period of the pause before autohide beings.
			},
			loop : false,
			repeat : function(event) {// The default jPlayer repeat event handler
				if(event.jPlayer.options.loop) {
					$(this).unbind(".jPlayerRepeat").bind($.jPlayer.event.ended + ".jPlayer.jPlayerRepeat", function() {
						$(this).jPlayer("play");
					});
				} else {
					$(this).unbind(".jPlayerRepeat");
				}
			},
			nativeVideoControls : {
				// Works well on standard browsers.
				// Phone and tablet browsers can have problems with the controls disappearing.
			},
			noFullScreen : {
				msie : /msie [0-6]/,
				ipad : /ipad.*?os [0-4]/,
				iphone : /iphone/,
				ipod : /ipod/,
				android_pad : /android [0-3](?!.*?mobile)/,
				android_phone : /android.*?mobile/,
				blackberry : /blackberry/,
				windows_ce : /windows ce/,
				webos : /webos/
			},
			noVolume : {
				ipad : /ipad/,
				iphone : /iphone/,
				ipod : /ipod/,
				android_pad : /android(?!.*?mobile)/,
				android_phone : /android.*?mobile/,
				blackberry : /blackberry/,
				windows_ce : /windows ce/,
				webos : /webos/,
				playbook : /playbook/
			},
			verticalVolume : false, // Calculate volume from the bottom of the volume bar. Default is from the left. Also volume affects either width or height.
			// globalVolume: false, // Not implemented: Set to make volume changes affect all jPlayer instances
			// globalMute: false, // Not implemented: Set to make mute changes affect all jPlayer instances
			idPrefix : "jp", // Prefix for the ids of html elements created by jPlayer. For flash, this must not include characters: . - + * / \
			noConflict : "jQuery",
			emulateHtml : false, // Emulates the HTML5 Media element on the jPlayer element.
			errorAlerts : false,
			warningAlerts : false
		},
		optionsAudio : {
			size : {
				width : "0px",
				height : "0px",
				cssClass : ""
			},
			sizeFull : {
				width : "0px",
				height : "0px",
				cssClass : ""
			}
		},
		optionsVideo : {
			size : {
				width : "480px",
				height : "270px",
				cssClass : "jp-video-270p"
			},
			sizeFull : {
				width : "100%",
				height : "100%",
				cssClass : "jp-video-full"
			}
		},
		instances : {}, // Static Object
		status : {// Instanced in _init()
			src : "",
			media : {},
			paused : true,
			format : {},
			formatType : "",
			waitForPlay : true, // Same as waitForLoad except in case where preloading.
			waitForLoad : true,
			srcSet : false,
			video : false, // True if playing a video
			seekPercent : 0,
			currentPercentRelative : 0,
			currentPercentAbsolute : 0,
			currentTime : 0,
			duration : 0,
			readyState : 0,
			networkState : 0,
			playbackRate : 1,
			ended : 0

			/*		Persistant status properties created dynamically at _init():
			 width
			 height
			 cssClass
			 nativeVideoControls
			 noFullScreen
			 noVolume
			 */
		},

		internal : {// Instanced in _init()
			ready : false
			// instance: undefined
			// domNode: undefined
			// htmlDlyCmdId: undefined
			// autohideId: undefined
		},
		solution : {// Static Object: Defines the solutions built in jPlayer.
			html : true,
			flash : true
		},
		// 'MPEG-4 support' : canPlayType('video/mp4; codecs="mp4v.20.8"')
		format : {// Static Object
			mp3 : {
				codec : 'audio/mpeg; codecs="mp3"',
				flashCanPlay : true,
				media : 'audio'
			},
			m4a : {// AAC / MP4
				codec : 'audio/mp4; codecs="mp4a.40.2"',
				flashCanPlay : true,
				media : 'audio'
			},
			oga : {// OGG
				codec : 'audio/ogg; codecs="vorbis"',
				flashCanPlay : false,
				media : 'audio'
			},
			wav : {// PCM
				codec : 'audio/wav; codecs="1"',
				flashCanPlay : false,
				media : 'audio'
			},
			webma : {// WEBM
				codec : 'audio/webm; codecs="vorbis"',
				flashCanPlay : false,
				media : 'audio'
			},
			fla : {// FLV / F4A
				codec : 'audio/x-flv',
				flashCanPlay : true,
				media : 'audio'
			},
			m4v : {// H.264 / MP4
				codec : 'video/mp4; codecs="avc1.42E01E, mp4a.40.2"',
				flashCanPlay : true,
				media : 'video'
			},
			ogv : {// OGG
				codec : 'video/ogg; codecs="theora, vorbis"',
				flashCanPlay : false,
				media : 'video'
			},
			webmv : {// WEBM
				codec : 'video/webm; codecs="vorbis, vp8"',
				flashCanPlay : false,
				media : 'video'
			},
			flv : {// FLV / F4V
				codec : 'video/x-flv',
				flashCanPlay : true,
				media : 'video'
			}
		},
		_init : function() {
			var self = this;

			this.element.empty();

			this.status = $.extend({}, this.status);
			// Copy static to unique instance.
			this.internal = $.extend({}, this.internal);
			// Copy static to unique instance.

			this.internal.domNode = this.element.get(0);

			this.formats = [];
			// Array based on supplied string option. Order defines priority.
			this.solutions = [];
			// Array based on solution string option. Order defines priority.
			this.require = {};
			// Which media types are required: video, audio.

			this.htmlElement = {};
			// DOM elements created by jPlayer
			this.html = {};
			// In _init()'s this.desired code and setmedia(): Accessed via this[solution], where solution from this.solutions array.
			this.html.audio = {};
			this.html.video = {};
			this.flash = {};
			// In _init()'s this.desired code and setmedia(): Accessed via this[solution], where solution from this.solutions array.

			this.css = {};
			this.css.cs = {};
			// Holds the css selector strings
			this.css.jq = {};
			// Holds jQuery selectors. ie., $(css.cs.method)

			this.ancestorJq = [];
			// Holds jQuery selector of cssSelectorAncestor. Init would use $() instead of [], but it is only 1.4+

			this.options.volume = this._limitValue(this.options.volume, 0, 1);
			// Limit volume value's bounds.

			// Create the formats array, with prority based on the order of the supplied formats string
			$.each(this.options.supplied.toLowerCase().split(","), function(index1, value1) {
				var format = value1.replace(/^\s+|\s+$/g, "");
				//trim
				if(self.format[format]) {// Check format is valid.
					var dupFound = false;
					$.each(self.formats, function(index2, value2) {// Check for duplicates
						if(format === value2) {
							dupFound = true;
							return false;
						}
					});
					if(!dupFound) {
						self.formats.push(format);
					}
				}
			});
			// Create the solutions array, with prority based on the order of the solution string
			$.each(this.options.solution.toLowerCase().split(","), function(index1, value1) {
				var solution = value1.replace(/^\s+|\s+$/g, "");
				//trim
				if(self.solution[solution]) {// Check solution is valid.
					var dupFound = false;
					$.each(self.solutions, function(index2, value2) {// Check for duplicates
						if(solution === value2) {
							dupFound = true;
							return false;
						}
					});
					if(!dupFound) {
						self.solutions.push(solution);
					}
				}
			});

			this.internal.instance = "jp_" + this.count;
			this.instances[this.internal.instance] = this.element;

			// Check the jPlayer div has an id and create one if required. Important for Flash to know the unique id for comms.
			if(!this.element.attr("id")) {
				this.element.attr("id", this.options.idPrefix + "_jplayer_" + this.count);
			}

			this.internal.self = $.extend({}, {
				id : this.element.attr("id"),
				jq : this.element
			});
			this.internal.audio = $.extend({}, {
				id : this.options.idPrefix + "_audio_" + this.count,
				jq : undefined
			});
			this.internal.video = $.extend({}, {
				id : this.options.idPrefix + "_video_" + this.count,
				jq : undefined
			});
			this.internal.flash = $.extend({}, {
				id : this.options.idPrefix + "_flash_" + this.count,
				jq : undefined,
				swf : this.options.swfPath + (this.options.swfPath.toLowerCase().slice(-4) !== ".swf" ? (this.options.swfPath && this.options.swfPath.slice(-1) !== "/" ? "/" : "") + "Jplayer.swf" : "")
			});
			this.internal.poster = $.extend({}, {
				id : this.options.idPrefix + "_poster_" + this.count,
				jq : undefined
			});

			// Register listeners defined in the constructor
			$.each($.jPlayer.event, function(eventName, eventType) {
				if(self.options[eventName] !== undefined) {
					self.element.bind(eventType + ".jPlayer", self.options[eventName]);
					// With .jPlayer namespace.
					self.options[eventName] = undefined;
					// Destroy the handler pointer copy on the options. Reason, events can be added/removed in other ways so this could be obsolete and misleading.
				}
			});
			// Determine if we require solutions for audio, video or both media types.
			this.require.audio = false;
			this.require.video = false;
			$.each(this.formats, function(priority, format) {
				self.require[self.format[format].media] = true;
			});
			// Now required types are known, finish the options default settings.
			if(this.require.video) {
				this.options = $.extend(true, {}, this.optionsVideo, this.options);
			} else {
				this.options = $.extend(true, {}, this.optionsAudio, this.options);
			}
			this._setSize();
			// update status and jPlayer element size

			// Determine the status for Blocklisted options.
			this.status.nativeVideoControls = this._uaBlocklist(this.options.nativeVideoControls);
			this.status.noFullScreen = this._uaBlocklist(this.options.noFullScreen);
			this.status.noVolume = this._uaBlocklist(this.options.noVolume);

			// The native controls are only for video and are disabled when audio is also used.
			this._restrictNativeVideoControls();

			// Create the poster image.
			this.htmlElement.poster = document.createElement('img');
			this.htmlElement.poster.id = this.internal.poster.id;
			this.htmlElement.poster.onload = function() {// Note that this did not work on Firefox 3.6: poster.addEventListener("onload", function() {}, false); Did not investigate x-browser.
				if(!self.status.video || self.status.waitForPlay) {
					self.internal.poster.jq.show();
				}
			};
			this.element.append(this.htmlElement.poster);
			this.internal.poster.jq = $("#" + this.internal.poster.id);
			this.internal.poster.jq.css({
				'width' : this.status.width,
				'height' : this.status.height
			});
			this.internal.poster.jq.hide();
			this.internal.poster.jq.bind("click.jPlayer", function() {
				self._trigger($.jPlayer.event.click);
			});
			// Generate the required media elements
			this.html.audio.available = false;
			if(this.require.audio) {// If a supplied format is audio
				this.htmlElement.audio = document.createElement('audio');
				this.htmlElement.audio.id = this.internal.audio.id;
				this.html.audio.available = !!this.htmlElement.audio.canPlayType && this._testCanPlayType(this.htmlElement.audio);
				// Test is for IE9 on Win Server 2008.
			}
			this.html.video.available = false;
			if(this.require.video) {// If a supplied format is video
				this.htmlElement.video = document.createElement('video');
				this.htmlElement.video.id = this.internal.video.id;
				this.html.video.available = !!this.htmlElement.video.canPlayType && this._testCanPlayType(this.htmlElement.video);
				// Test is for IE9 on Win Server 2008.
			}

			this.flash.available = this._checkForFlash(10);

			this.html.canPlay = {};
			this.flash.canPlay = {};
			$.each(this.formats, function(priority, format) {
				self.html.canPlay[format] = self.html[self.format[format].media].available && "" !== self.htmlElement[self.format[format].media].canPlayType(self.format[format].codec);
				self.flash.canPlay[format] = self.format[format].flashCanPlay && self.flash.available;
			});
			this.html.desired = false;
			this.flash.desired = false;
			$.each(this.solutions, function(solutionPriority, solution) {
				if(solutionPriority === 0) {
					self[solution].desired = true;
				} else {
					var audioCanPlay = false;
					var videoCanPlay = false;
					$.each(self.formats, function(formatPriority, format) {
						if(self[self.solutions[0]].canPlay[format]) {// The other solution can play
							if(self.format[format].media === 'video') {
								videoCanPlay = true;
							} else {
								audioCanPlay = true;
							}
						}
					});
					self[solution].desired = (self.require.audio && !audioCanPlay) || (self.require.video && !videoCanPlay);
				}
			});
			// This is what jPlayer will support, based on solution and supplied.
			this.html.support = {};
			this.flash.support = {};
			$.each(this.formats, function(priority, format) {
				self.html.support[format] = self.html.canPlay[format] && self.html.desired;
				self.flash.support[format] = self.flash.canPlay[format] && self.flash.desired;
			});
			// If jPlayer is supporting any format in a solution, then the solution is used.
			this.html.used = false;
			this.flash.used = false;
			$.each(this.solutions, function(solutionPriority, solution) {
				$.each(self.formats, function(formatPriority, format) {
					if(self[solution].support[format]) {
						self[solution].used = true;
						return false;
					}
				});
			});
			// Init solution active state and the event gates to false.
			this._resetActive();
			this._resetGate();

			// Set up the css selectors for the control and feedback entities.
			this._cssSelectorAncestor(this.options.cssSelectorAncestor);

			// If neither html nor flash are being used by this browser, then media playback is not possible. Trigger an error event.
			if(!(this.html.used || this.flash.used)) {
				this._error({
					type : $.jPlayer.error.NO_SOLUTION,
					context : "{solution:'" + this.options.solution + "', supplied:'" + this.options.supplied + "'}",
					message : $.jPlayer.errorMsg.NO_SOLUTION,
					hint : $.jPlayer.errorHint.NO_SOLUTION
				});
				if(this.css.jq.noSolution.length) {
					this.css.jq.noSolution.show();
				}
			} else {
				if(this.css.jq.noSolution.length) {
					this.css.jq.noSolution.hide();
				}
			}

			// Add the flash solution if it is being used.
			if(this.flash.used) {
				var htmlObj, flashVars = 'jQuery=' + encodeURI(this.options.noConflict) + '&id=' + encodeURI(this.internal.self.id) + '&vol=' + this.options.volume + '&muted=' + this.options.muted;

				// Code influenced by SWFObject 2.2: http://code.google.com/p/swfobject/
				// Non IE browsers have an initial Flash size of 1 by 1 otherwise the wmode affected the Flash ready event.

				if($.browser.msie && Number($.browser.version) <= 8) {
					var objStr = '<object id="' + this.internal.flash.id + '" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="0" height="0"></object>';

					var paramStr = ['<param name="movie" value="' + this.internal.flash.swf + '" />', '<param name="FlashVars" value="' + flashVars + '" />', '<param name="allowScriptAccess" value="always" />', '<param name="bgcolor" value="' + this.options.backgroundColor + '" />', '<param name="wmode" value="' + this.options.wmode + '" />'];
					htmlObj = document.createElement(objStr);
					for(var i = 0; i < paramStr.length; i++) {
						htmlObj.appendChild(document.createElement(paramStr[i]));
					}
				} else {
					var createParam = function(el, n, v) {
						var p = document.createElement("param");
						p.setAttribute("name", n);
						p.setAttribute("value", v);
						el.appendChild(p);
					};
					htmlObj = document.createElement("object");
					htmlObj.setAttribute("id", this.internal.flash.id);
					htmlObj.setAttribute("data", this.internal.flash.swf);
					htmlObj.setAttribute("type", "application/x-shockwave-flash");
					htmlObj.setAttribute("width", "1");
					// Non-zero
					htmlObj.setAttribute("height", "1");
					// Non-zero
					createParam(htmlObj, "flashvars", flashVars);
					createParam(htmlObj, "allowscriptaccess", "always");
					createParam(htmlObj, "bgcolor", this.options.backgroundColor);
					createParam(htmlObj, "wmode", this.options.wmode);
				}

				this.element.append(htmlObj);
				this.internal.flash.jq = $(htmlObj);
			}

			// Add the HTML solution if being used.
			if(this.html.used) {

				// The HTML Audio handlers
				if(this.html.audio.available) {
					this._addHtmlEventListeners(this.htmlElement.audio, this.html.audio);
					this.element.append(this.htmlElement.audio);
					this.internal.audio.jq = $("#" + this.internal.audio.id);
				}

				// The HTML Video handlers
				if(this.html.video.available) {
					this._addHtmlEventListeners(this.htmlElement.video, this.html.video);
					this.element.append(this.htmlElement.video);
					this.internal.video.jq = $("#" + this.internal.video.id);
					if(this.status.nativeVideoControls) {
						this.internal.video.jq.css({
							'width' : this.status.width,
							'height' : this.status.height
						});
					} else {
						this.internal.video.jq.css({
							'width' : '0px',
							'height' : '0px'
						});
						// Using size 0x0 since a .hide() causes issues in iOS
					}
					this.internal.video.jq.bind("click.jPlayer", function() {
						self._trigger($.jPlayer.event.click);
					});
				}
			}

			// Create the bridge that emulates the HTML Media element on the jPlayer DIV
			if(this.options.emulateHtml) {
				this._emulateHtmlBridge();
			}

			if(this.html.used && !this.flash.used) {// If only HTML, then emulate flash ready() call after 100ms.
				setTimeout(function() {
					self.internal.ready = true;
					self.version.flash = "n/a";
					self._trigger($.jPlayer.event.repeat);
					// Trigger the repeat event so its handler can initialize itself with the loop option.
					self._trigger($.jPlayer.event.ready);
				}, 100);
			}

			// Initialize the interface components with the options.
			this._updateNativeVideoControls();
			// Must do this first, otherwise there is a bizarre bug in iOS 4.3.2, where the native controls are not shown. Fails in iOS if called after _updateButtons() below. Works if called later in setMedia too, so it odd.
			this._updateInterface();
			this._updateButtons(false);
			this._updateAutohide();
			this._updateVolume(this.options.volume);
			this._updateMute(this.options.muted);
			if(this.css.jq.videoPlay.length) {
				this.css.jq.videoPlay.hide();
			}

			$.jPlayer.prototype.count++;
			// Change static variable via prototype.
		},
		destroy : function() {
			// MJP: The background change remains. Would need to store the original to restore it correctly.
			// MJP: The jPlayer element's size change remains.

			// Clear the media to reset the GUI and stop any downloads. Streams on some browsers had persited. (Chrome)
			this.clearMedia();
			// Remove the size/sizeFull cssClass from the cssSelectorAncestor
			this._removeUiClass();
			// Remove the times from the GUI
			if(this.css.jq.currentTime.length) {
				this.css.jq.currentTime.text("");
			}
			if(this.css.jq.duration.length) {
				this.css.jq.duration.text("");
			}
			// Remove any bindings from the interface controls.
			$.each(this.css.jq, function(fn, jq) {
				// Check selector is valid before trying to execute method.
				if(jq.length) {
					jq.unbind(".jPlayer");
				}
			});
			// Remove the click handlers for $.jPlayer.event.click
			this.internal.poster.jq.unbind(".jPlayer");
			if(this.internal.video.jq) {
				this.internal.video.jq.unbind(".jPlayer");
			}
			// Destroy the HTML bridge.
			if(this.options.emulateHtml) {
				this._destroyHtmlBridge();
			}
			this.element.removeData("jPlayer");
			// Remove jPlayer data
			this.element.unbind(".jPlayer");
			// Remove all event handlers created by the jPlayer constructor
			this.element.empty();
			// Remove the inserted child elements

			delete this.instances[this.internal.instance];
			// Clear the instance on the static instance object
		},
		enable : function() { // Plan to implement
			// options.disabled = false
		},
		disable : function() { // Plan to implement
			// options.disabled = true
		},
		_testCanPlayType : function(elem) {
			// IE9 on Win Server 2008 did not implement canPlayType(), but it has the property.
			try {
				elem.canPlayType(this.format.mp3.codec);
				// The type is irrelevant.
				return true;
			} catch(err) {
				return false;
			}
		},
		_uaBlocklist : function(list) {
			// list : object with properties that are all regular expressions. Property names are irrelevant.
			// Returns true if the user agent is matched in list.
			var ua = navigator.userAgent.toLowerCase(), block = false;

			$.each(list, function(p, re) {
				if(re && re.test(ua)) {
					block = true;
					return false;
					// exit $.each.
				}
			});
			return block;
		},
		_restrictNativeVideoControls : function() {
			// Fallback to noFullScreen when nativeVideoControls is true and audio media is being used. Affects when both media types are used.
			if(this.require.audio) {
				if(this.status.nativeVideoControls) {
					this.status.nativeVideoControls = false;
					this.status.noFullScreen = true;
				}
			}
		},
		_updateNativeVideoControls : function() {
			if(this.html.video.available && this.html.used) {
				// Turn the HTML Video controls on/off
				this.htmlElement.video.controls = this.status.nativeVideoControls;
				// Show/hide the jPlayer GUI.
				this._updateAutohide();
				// For when option changed. The poster image is not updated, as it is dealt with in setMedia(). Acceptable degradation since seriously doubt these options will change on the fly. Can again review later.
				if(this.status.nativeVideoControls && this.require.video) {
					this.internal.poster.jq.hide();
					this.internal.video.jq.css({
						'width' : this.status.width,
						'height' : this.status.height
					});
				} else if(this.status.waitForPlay && this.status.video) {
					this.internal.poster.jq.show();
					this.internal.video.jq.css({
						'width' : '0px',
						'height' : '0px'
					});
				}
			}
		},
		_addHtmlEventListeners : function(mediaElement, entity) {
			var self = this;
			mediaElement.preload = this.options.preload;
			mediaElement.muted = this.options.muted;
			mediaElement.volume = this.options.volume;

			// Create the event listeners
			// Only want the active entity to affect jPlayer and bubble events.
			// Using entity.gate so that object is referenced and gate property always current

			mediaElement.addEventListener("progress", function() {
				if(entity.gate) {
					self._getHtmlStatus(mediaElement);
					self._updateInterface();
					self._trigger($.jPlayer.event.progress);
				}
			}, false);
			mediaElement.addEventListener("timeupdate", function() {
				if(entity.gate) {
					self._getHtmlStatus(mediaElement);
					self._updateInterface();
					self._trigger($.jPlayer.event.timeupdate);
				}
			}, false);
			mediaElement.addEventListener("durationchange", function() {
				if(entity.gate) {
					self.status.duration = this.duration;
					self._getHtmlStatus(mediaElement);
					self._updateInterface();
					self._trigger($.jPlayer.event.durationchange);
				}
			}, false);
			mediaElement.addEventListener("play", function() {
				if(entity.gate) {
					self._updateButtons(true);
					self._html_checkWaitForPlay();
					// So the native controls update this variable and puts the hidden interface in the correct state. Affects toggling native controls.
					self._trigger($.jPlayer.event.play);
				}
			}, false);
			mediaElement.addEventListener("playing", function() {
				if(entity.gate) {
					self._updateButtons(true);
					self._seeked();
					self._trigger($.jPlayer.event.playing);
				}
			}, false);
			mediaElement.addEventListener("pause", function() {
				if(entity.gate) {
					self._updateButtons(false);
					self._trigger($.jPlayer.event.pause);
				}
			}, false);
			mediaElement.addEventListener("waiting", function() {
				if(entity.gate) {
					self._seeking();
					self._trigger($.jPlayer.event.waiting);
				}
			}, false);
			mediaElement.addEventListener("seeking", function() {
				if(entity.gate) {
					self._seeking();
					self._trigger($.jPlayer.event.seeking);
				}
			}, false);
			mediaElement.addEventListener("seeked", function() {
				if(entity.gate) {
					self._seeked();
					self._trigger($.jPlayer.event.seeked);
				}
			}, false);
			mediaElement.addEventListener("volumechange", function() {
				if(entity.gate) {
					// Read the values back from the element as the Blackberry PlayBook shares the volume with the physical buttons master volume control.
					// However, when tested 6th July 2011, those buttons do not generate an event. The physical play/pause button does though.
					self.options.volume = mediaElement.volume;
					self.options.muted = mediaElement.muted;
					self._updateMute();
					self._updateVolume();
					self._trigger($.jPlayer.event.volumechange);
				}
			}, false);
			mediaElement.addEventListener("suspend", function() {// Seems to be the only way of capturing that the iOS4 browser did not actually play the media from the page code. ie., It needs a user gesture.
				if(entity.gate) {
					self._seeked();
					self._trigger($.jPlayer.event.suspend);
				}
			}, false);
			mediaElement.addEventListener("ended", function() {
				if(entity.gate) {
					// Order of the next few commands are important. Change the time and then pause.
					// Solves a bug in Firefox, where issuing pause 1st causes the media to play from the start. ie., The pause is ignored.
					if(!$.jPlayer.browser.webkit) {// Chrome crashes if you do this in conjunction with a setMedia command in an ended event handler. ie., The playlist demo.
						self.htmlElement.media.currentTime = 0;
						// Safari does not care about this command. ie., It works with or without this line. (Both Safari and Chrome are Webkit.)
					}
					self.htmlElement.media.pause();
					// Pause otherwise a click on the progress bar will play from that point, when it shouldn't, since it stopped playback.
					self._updateButtons(false);
					self._getHtmlStatus(mediaElement, true);
					// With override true. Otherwise Chrome leaves progress at full.
					self._updateInterface();
					self._trigger($.jPlayer.event.ended);
				}
			}, false);
			mediaElement.addEventListener("error", function() {
				if(entity.gate) {
					self._updateButtons(false);
					self._seeked();
					if(self.status.srcSet) {// Deals with case of clearMedia() causing an error event.
						clearTimeout(self.internal.htmlDlyCmdId);
						// Clears any delayed commands used in the HTML solution.
						self.status.waitForLoad = true;
						// Allows the load operation to try again.
						self.status.waitForPlay = true;
						// Reset since a play was captured.
						if(self.status.video && !self.status.nativeVideoControls) {
							self.internal.video.jq.css({
								'width' : '0px',
								'height' : '0px'
							});
						}
						if(self._validString(self.status.media.poster) && !self.status.nativeVideoControls) {
							self.internal.poster.jq.show();
						}
						if(self.css.jq.videoPlay.length) {
							self.css.jq.videoPlay.show();
						}
						self._error({
							type : $.jPlayer.error.URL,
							context : self.status.src, // this.src shows absolute urls. Want context to show the url given.
							message : $.jPlayer.errorMsg.URL,
							hint : $.jPlayer.errorHint.URL
						});
					}
				}
			}, false);
			// Create all the other event listeners that bubble up to a jPlayer event from html, without being used by jPlayer.
			$.each($.jPlayer.htmlEvent, function(i, eventType) {
				mediaElement.addEventListener(this, function() {
					if(entity.gate) {
						self._trigger($.jPlayer.event[eventType]);
					}
				}, false);
			});
		},
		_getHtmlStatus : function(media, override) {
			var ct = 0, d = 0, cpa = 0, sp = 0, cpr = 0;

			if(media.duration) {// Fixes the duration bug in iOS, where the durationchange event occurs when media.duration is not always correct.
				this.status.duration = media.duration;
			}
			ct = media.currentTime;
			cpa = (this.status.duration > 0) ? 100 * ct / this.status.duration : 0;
			if(( typeof media.seekable === "object") && (media.seekable.length > 0)) {
				sp = (this.status.duration > 0) ? 100 * media.seekable.end(media.seekable.length - 1) / this.status.duration : 100;
				cpr = 100 * media.currentTime / media.seekable.end(media.seekable.length - 1);
			} else {
				sp = 100;
				cpr = cpa;
			}

			if(override) {
				ct = 0;
				cpr = 0;
				cpa = 0;
			}

			this.status.seekPercent = sp;
			this.status.currentPercentRelative = cpr;
			this.status.currentPercentAbsolute = cpa;
			this.status.currentTime = ct;

			this.status.readyState = media.readyState;
			this.status.networkState = media.networkState;
			this.status.playbackRate = media.playbackRate;
			this.status.ended = media.ended;
		},
		_resetStatus : function() {
			this.status = $.extend({}, this.status, $.jPlayer.prototype.status);
			// Maintains the status properties that persist through a reset.
		},
		_trigger : function(eventType, error, warning) {// eventType always valid as called using $.jPlayer.event.eventType
			var event = $.Event(eventType);
			event.jPlayer = {};
			event.jPlayer.version = $.extend({}, this.version);
			event.jPlayer.options = $.extend(true, {}, this.options);
			// Deep copy
			event.jPlayer.status = $.extend(true, {}, this.status);
			// Deep copy
			event.jPlayer.html = $.extend(true, {}, this.html);
			// Deep copy
			event.jPlayer.flash = $.extend(true, {}, this.flash);
			// Deep copy
			if(error) {
				event.jPlayer.error = $.extend({}, error);
			}
			if(warning) {
				event.jPlayer.warning = $.extend({}, warning);
			}
			this.element.trigger(event);
		},
		jPlayerFlashEvent : function(eventType, status) {// Called from Flash
			if(eventType === $.jPlayer.event.ready) {
				if(!this.internal.ready) {
					this.internal.ready = true;
					this.internal.flash.jq.css({
						'width' : '0px',
						'height' : '0px'
					});
					// Once Flash generates the ready event, minimise to zero as it is not affected by wmode anymore.

					this.version.flash = status.version;
					if(this.version.needFlash !== this.version.flash) {
						this._error({
							type : $.jPlayer.error.VERSION,
							context : this.version.flash,
							message : $.jPlayer.errorMsg.VERSION + this.version.flash,
							hint : $.jPlayer.errorHint.VERSION
						});
					}
					this._trigger($.jPlayer.event.repeat);
					// Trigger the repeat event so its handler can initialize itself with the loop option.
					this._trigger(eventType);
				} else {
					// This condition occurs if the Flash is hidden and then shown again.
					// Firefox also reloads the Flash if the CSS position changes. position:fixed is used for full screen.

					// Only do this if the Flash is the solution being used at the moment. Affects Media players where both solution may be being used.
					if(this.flash.gate) {

						// Send the current status to the Flash now that it is ready (available) again.
						if(this.status.srcSet) {

							// Need to read original status before issuing the setMedia command.
							var currentTime = this.status.currentTime, paused = this.status.paused;

							this.setMedia(this.status.media);
							if(currentTime > 0) {
								if(paused) {
									this.pause(currentTime);
								} else {
									this.play(currentTime);
								}
							}
						}
						this._trigger($.jPlayer.event.flashreset);
					}
				}
			}
			if(this.flash.gate) {
				switch(eventType) {
					case $.jPlayer.event.progress:
						this._getFlashStatus(status);
						this._updateInterface();
						this._trigger(eventType);
						break;
					case $.jPlayer.event.timeupdate:
						this._getFlashStatus(status);
						this._updateInterface();
						this._trigger(eventType);
						break;
					case $.jPlayer.event.play:
						this._seeked();
						this._updateButtons(true);
						this._trigger(eventType);
						break;
					case $.jPlayer.event.pause:
						this._updateButtons(false);
						this._trigger(eventType);
						break;
					case $.jPlayer.event.ended:
						this._updateButtons(false);
						this._trigger(eventType);
						break;
					case $.jPlayer.event.click:
						this._trigger(eventType);
						// This could be dealt with by the default
						break;
					case $.jPlayer.event.error:
						this.status.waitForLoad = true;
						// Allows the load operation to try again.
						this.status.waitForPlay = true;
						// Reset since a play was captured.
						if(this.status.video) {
							this.internal.flash.jq.css({
								'width' : '0px',
								'height' : '0px'
							});
						}
						if(this._validString(this.status.media.poster)) {
							this.internal.poster.jq.show();
						}
						if(this.css.jq.videoPlay.length && this.status.video) {
							this.css.jq.videoPlay.show();
						}
						if(this.status.video) {// Set up for another try. Execute before error event.
							this._flash_setVideo(this.status.media);
						} else {
							this._flash_setAudio(this.status.media);
						}
						this._updateButtons(false);
						this._error({
							type : $.jPlayer.error.URL,
							context : status.src,
							message : $.jPlayer.errorMsg.URL,
							hint : $.jPlayer.errorHint.URL
						});
						break;
					case $.jPlayer.event.seeking:
						this._seeking();
						this._trigger(eventType);
						break;
					case $.jPlayer.event.seeked:
						this._seeked();
						this._trigger(eventType);
						break;
					case $.jPlayer.event.ready:
						// The ready event is handled outside the switch statement.
						// Captured here otherwise 2 ready events would be generated if the ready event handler used setMedia.
						break;
					default:
						this._trigger(eventType);
				}
			}
			return false;
		},
		_getFlashStatus : function(status) {
			this.status.seekPercent = status.seekPercent;
			this.status.currentPercentRelative = status.currentPercentRelative;
			this.status.currentPercentAbsolute = status.currentPercentAbsolute;
			this.status.currentTime = status.currentTime;
			this.status.duration = status.duration;

			// The Flash does not generate this information in this release
			this.status.readyState = 4;
			// status.readyState;
			this.status.networkState = 0;
			// status.networkState;
			this.status.playbackRate = 1;
			// status.playbackRate;
			this.status.ended = false;
			// status.ended;
		},
		_updateButtons : function(playing) {
			if(playing !== undefined) {
				this.status.paused = !playing;
				if(this.css.jq.play.length && this.css.jq.pause.length) {
					if(playing) {
						this.css.jq.play.hide();
						this.css.jq.pause.show();
					} else {
						this.css.jq.play.show();
						this.css.jq.pause.hide();
					}
				}
			}
			if(this.css.jq.restoreScreen.length && this.css.jq.fullScreen.length) {
				if(this.status.noFullScreen) {
					this.css.jq.fullScreen.hide();
					this.css.jq.restoreScreen.hide();
				} else if(this.options.fullScreen) {
					this.css.jq.fullScreen.hide();
					this.css.jq.restoreScreen.show();
				} else {
					this.css.jq.fullScreen.show();
					this.css.jq.restoreScreen.hide();
				}
			}
			if(this.css.jq.repeat.length && this.css.jq.repeatOff.length) {
				if(this.options.loop) {
					this.css.jq.repeat.hide();
					this.css.jq.repeatOff.show();
				} else {
					this.css.jq.repeat.show();
					this.css.jq.repeatOff.hide();
				}
			}
		},
		_updateInterface : function() {
			if(this.css.jq.seekBar.length) {
				this.css.jq.seekBar.width(this.status.seekPercent + "%");
			}
			if(this.css.jq.playBar.length) {
				this.css.jq.playBar.width(this.status.currentPercentRelative + "%");
			}
			if(this.css.jq.currentTime.length) {
				this.css.jq.currentTime.text($.jPlayer.convertTime(this.status.currentTime));
			}
			if(this.css.jq.duration.length) {
				this.css.jq.duration.text($.jPlayer.convertTime(this.status.duration));
			}
		},
		_seeking : function() {
			if(this.css.jq.seekBar.length) {
				this.css.jq.seekBar.addClass("jp-seeking-bg");
			}
		},
		_seeked : function() {
			if(this.css.jq.seekBar.length) {
				this.css.jq.seekBar.removeClass("jp-seeking-bg");
			}
		},
		_resetGate : function() {
			this.html.audio.gate = false;
			this.html.video.gate = false;
			this.flash.gate = false;
		},
		_resetActive : function() {
			this.html.active = false;
			this.flash.active = false;
		},
		setMedia : function(media) {

			/*	media[format] = String: URL of format. Must contain all of the supplied option's video or audio formats.
			 *	media.poster = String: Video poster URL.
			 *	media.subtitles = String: * NOT IMPLEMENTED * URL of subtitles SRT file
			 *	media.chapters = String: * NOT IMPLEMENTED * URL of chapters SRT file
			 *	media.stream = Boolean: * NOT IMPLEMENTED * Designating actual media streams. ie., "false/undefined" for files. Plan to refresh the flash every so often.
			 */

			var self = this, supported = false, posterChanged = this.status.media.poster !== media.poster;
			// Compare before reset. Important for OSX Safari as this.htmlElement.poster.src is absolute, even if original poster URL was relative.

			this._resetMedia();
			this._resetGate();
			this._resetActive();

			$.each(this.formats, function(formatPriority, format) {
				var isVideo = self.format[format].media === 'video';
				$.each(self.solutions, function(solutionPriority, solution) {
					if(self[solution].support[format] && self._validString(media[format])) {// Format supported in solution and url given for format.
						var isHtml = solution === 'html';

						if(isVideo) {
							if(isHtml) {
								self.html.video.gate = true;
								self._html_setVideo(media);
								self.html.active = true;
							} else {
								self.flash.gate = true;
								self._flash_setVideo(media);
								self.flash.active = true;
							}
							if(self.css.jq.videoPlay.length) {
								self.css.jq.videoPlay.show();
							}
							self.status.video = true;
						} else {
							if(isHtml) {
								self.html.audio.gate = true;
								self._html_setAudio(media);
								self.html.active = true;
							} else {
								self.flash.gate = true;
								self._flash_setAudio(media);
								self.flash.active = true;
							}
							if(self.css.jq.videoPlay.length) {
								self.css.jq.videoPlay.hide();
							}
							self.status.video = false;
						}
						supported = true;
						return false;
						// Exit $.each
					}
				});
				if(supported) {
					return false;
					// Exit $.each
				}
			});
			if(supported) {
				if(!(this.status.nativeVideoControls && this.html.video.gate)) {
					// Set poster IMG if native video controls are not being used
					// Note: With IE the IMG onload event occurs immediately when cached.
					// Note: Poster hidden by default in _resetMedia()
					if(this._validString(media.poster)) {
						if(posterChanged) {// Since some browsers do not generate img onload event.
							this.htmlElement.poster.src = media.poster;
						} else {
							this.internal.poster.jq.show();
						}
					}
				}
				this.status.srcSet = true;
				this.status.media = $.extend({}, media);
				this._updateButtons(false);
				this._updateInterface();
			} else {// jPlayer cannot support any formats provided in this browser
				// Send an error event
				this._error({
					type : $.jPlayer.error.NO_SUPPORT,
					context : "{supplied:'" + this.options.supplied + "'}",
					message : $.jPlayer.errorMsg.NO_SUPPORT,
					hint : $.jPlayer.errorHint.NO_SUPPORT
				});
			}
		},
		_resetMedia : function() {
			this._resetStatus();
			this._updateButtons(false);
			this._updateInterface();
			this._seeked();
			this.internal.poster.jq.hide();

			clearTimeout(this.internal.htmlDlyCmdId);

			if(this.html.active) {
				this._html_resetMedia();
			} else if(this.flash.active) {
				this._flash_resetMedia();
			}
		},
		clearMedia : function() {
			this._resetMedia();

			if(this.html.active) {
				this._html_clearMedia();
			} else if(this.flash.active) {
				this._flash_clearMedia();
			}

			this._resetGate();
			this._resetActive();
		},
		load : function() {
			if(this.status.srcSet) {
				if(this.html.active) {
					this._html_load();
				} else if(this.flash.active) {
					this._flash_load();
				}
			} else {
				this._urlNotSetError("load");
			}
		},
		play : function(time) {
			time = ( typeof time === "number") ? time : NaN;
			// Remove jQuery event from click handler
			if(this.status.srcSet) {
				if(this.html.active) {
					this._html_play(time);
				} else if(this.flash.active) {
					this._flash_play(time);
				}
			} else {
				this._urlNotSetError("play");
			}
		},
		videoPlay : function(e) {// Handles clicks on the play button over the video poster
			this.play();
		},
		pause : function(time) {
			time = ( typeof time === "number") ? time : NaN;
			// Remove jQuery event from click handler
			if(this.status.srcSet) {
				if(this.html.active) {
					this._html_pause(time);
				} else if(this.flash.active) {
					this._flash_pause(time);
				}
			} else {
				this._urlNotSetError("pause");
			}
		},
		pauseOthers : function() {
			var self = this;
			$.each(this.instances, function(i, element) {
				if(self.element !== element) {// Do not this instance.
					if(element.data("jPlayer").status.srcSet) {// Check that media is set otherwise would cause error event.
						element.jPlayer("pause");
					}
				}
			});
		},
		stop : function() {
			if(this.status.srcSet) {
				if(this.html.active) {
					this._html_pause(0);
				} else if(this.flash.active) {
					this._flash_pause(0);
				}
			} else {
				this._urlNotSetError("stop");
			}
		},
		playHead : function(p) {
			p = this._limitValue(p, 0, 100);
			if(this.status.srcSet) {
				if(this.html.active) {
					this._html_playHead(p);
				} else if(this.flash.active) {
					this._flash_playHead(p);
				}
			} else {
				this._urlNotSetError("playHead");
			}
		},
		_muted : function(muted) {
			this.options.muted = muted;
			if(this.html.used) {
				this._html_mute(muted);
			}
			if(this.flash.used) {
				this._flash_mute(muted);
			}

			// The HTML solution generates this event from the media element itself.
			if(!this.html.video.gate && !this.html.audio.gate) {
				this._updateMute(muted);
				this._updateVolume(this.options.volume);
				this._trigger($.jPlayer.event.volumechange);
			}
		},
		mute : function(mute) {// mute is either: undefined (true), an event object (true) or a boolean (muted).
			mute = mute === undefined ? true : !!mute;
			this._muted(mute);
		},
		unmute : function(unmute) {// unmute is either: undefined (true), an event object (true) or a boolean (!muted).
			unmute = unmute === undefined ? true : !!unmute;
			this._muted(!unmute);
		},
		_updateMute : function(mute) {
			if(mute === undefined) {
				mute = this.options.muted;
			}
			if(this.css.jq.mute.length && this.css.jq.unmute.length) {
				if(this.status.noVolume) {
					this.css.jq.mute.hide();
					this.css.jq.unmute.hide();
				} else if(mute) {
					this.css.jq.mute.hide();
					this.css.jq.unmute.show();
				} else {
					this.css.jq.mute.show();
					this.css.jq.unmute.hide();
				}
			}
		},
		volume : function(v) {
			v = this._limitValue(v, 0, 1);
			this.options.volume = v;

			if(this.html.used) {
				this._html_volume(v);
			}
			if(this.flash.used) {
				this._flash_volume(v);
			}

			// The HTML solution generates this event from the media element itself.
			if(!this.html.video.gate && !this.html.audio.gate) {
				this._updateVolume(v);
				this._trigger($.jPlayer.event.volumechange);
			}
		},
		volumeBar : function(e) {// Handles clicks on the volumeBar
			if(this.css.jq.volumeBar.length) {
				var offset = this.css.jq.volumeBar.offset(), x = e.pageX - offset.left, w = this.css.jq.volumeBar.width(), y = this.css.jq.volumeBar.height() - e.pageY + offset.top, h = this.css.jq.volumeBar.height();

				if(this.options.verticalVolume) {
					this.volume(y / h);
				} else {
					this.volume(x / w);
				}
			}
			if(this.options.muted) {
				this._muted(false);
			}
		},
		volumeBarValue : function(e) {// Handles clicks on the volumeBarValue
			this.volumeBar(e);
		},
		_updateVolume : function(v) {
			if(v === undefined) {
				v = this.options.volume;
			}
			v = this.options.muted ? 0 : v;

			if(this.status.noVolume) {
				if(this.css.jq.volumeBar.length) {
					this.css.jq.volumeBar.hide();
				}
				if(this.css.jq.volumeBarValue.length) {
					this.css.jq.volumeBarValue.hide();
				}
				if(this.css.jq.volumeMax.length) {
					this.css.jq.volumeMax.hide();
				}
			} else {
				if(this.css.jq.volumeBar.length) {
					this.css.jq.volumeBar.show();
				}
				if(this.css.jq.volumeBarValue.length) {
					this.css.jq.volumeBarValue.show();
					this.css.jq.volumeBarValue[this.options.verticalVolume ? "height" : "width"]((v * 100) + "%");
				}
				if(this.css.jq.volumeMax.length) {
					this.css.jq.volumeMax.show();
				}
			}
		},
		volumeMax : function() {// Handles clicks on the volume max
			this.volume(1);
			if(this.options.muted) {
				this._muted(false);
			}
		},
		_cssSelectorAncestor : function(ancestor) {
			var self = this;
			this.options.cssSelectorAncestor = ancestor;
			this._removeUiClass();
			this.ancestorJq = ancestor ? $(ancestor) : [];
			// Would use $() instead of [], but it is only 1.4+
			if(ancestor && this.ancestorJq.length !== 1) {// So empty strings do not generate the warning.
				this._warning({
					type : $.jPlayer.warning.CSS_SELECTOR_COUNT,
					context : ancestor,
					message : $.jPlayer.warningMsg.CSS_SELECTOR_COUNT + this.ancestorJq.length + " found for cssSelectorAncestor.",
					hint : $.jPlayer.warningHint.CSS_SELECTOR_COUNT
				});
			}
			this._addUiClass();
			$.each(this.options.cssSelector, function(fn, cssSel) {
				self._cssSelector(fn, cssSel);
			});
		},
		_cssSelector : function(fn, cssSel) {
			var self = this;
			if( typeof cssSel === 'string') {
				if($.jPlayer.prototype.options.cssSelector[fn]) {
					if(this.css.jq[fn] && this.css.jq[fn].length) {
						this.css.jq[fn].unbind(".jPlayer");
					}
					this.options.cssSelector[fn] = cssSel;
					this.css.cs[fn] = this.options.cssSelectorAncestor + " " + cssSel;

					if(cssSel) {// Checks for empty string
						this.css.jq[fn] = $(this.css.cs[fn]);
					} else {
						this.css.jq[fn] = [];
						// To comply with the css.jq[fn].length check before its use. As of jQuery 1.4 could have used $() for an empty set.
					}

					if(this.css.jq[fn].length) {
						var handler = function(e) {
							self[fn](e);
							$(this).blur();
							return false;
						};
						this.css.jq[fn].bind("click.jPlayer", handler);
						// Using jPlayer namespace
					}

					if(cssSel && this.css.jq[fn].length !== 1) {// So empty strings do not generate the warning. ie., they just remove the old one.
						this._warning({
							type : $.jPlayer.warning.CSS_SELECTOR_COUNT,
							context : this.css.cs[fn],
							message : $.jPlayer.warningMsg.CSS_SELECTOR_COUNT + this.css.jq[fn].length + " found for " + fn + " method.",
							hint : $.jPlayer.warningHint.CSS_SELECTOR_COUNT
						});
					}
				} else {
					this._warning({
						type : $.jPlayer.warning.CSS_SELECTOR_METHOD,
						context : fn,
						message : $.jPlayer.warningMsg.CSS_SELECTOR_METHOD,
						hint : $.jPlayer.warningHint.CSS_SELECTOR_METHOD
					});
				}
			} else {
				this._warning({
					type : $.jPlayer.warning.CSS_SELECTOR_STRING,
					context : cssSel,
					message : $.jPlayer.warningMsg.CSS_SELECTOR_STRING,
					hint : $.jPlayer.warningHint.CSS_SELECTOR_STRING
				});
			}
		},
		seekBar : function(e) {// Handles clicks on the seekBar
			if(this.css.jq.seekBar) {
				var offset = this.css.jq.seekBar.offset();
				var x = e.pageX - offset.left;
				var w = this.css.jq.seekBar.width();
				var p = 100 * x / w;
				this.playHead(p);
			}
		},
		playBar : function(e) {// Handles clicks on the playBar
			this.seekBar(e);
		},
		repeat : function() {// Handle clicks on the repeat button
			this._loop(true);
		},
		repeatOff : function() {// Handle clicks on the repeatOff button
			this._loop(false);
		},
		_loop : function(loop) {
			if(this.options.loop !== loop) {
				this.options.loop = loop;
				this._updateButtons();
				this._trigger($.jPlayer.event.repeat);
			}
		},
		// Plan to review the cssSelector method to cope with missing associated functions accordingly.

		currentTime : function(e) { // Handles clicks on the text
			// Added to avoid errors using cssSelector system for the text
		},
		duration : function(e) { // Handles clicks on the text
			// Added to avoid errors using cssSelector system for the text
		},
		gui : function(e) { // Handles clicks on the gui
			// Added to avoid errors using cssSelector system for the gui
		},
		noSolution : function(e) { // Handles clicks on the error message
			// Added to avoid errors using cssSelector system for no-solution
		},
		// Options code adapted from ui.widget.js (1.8.7).  Made changes so the key can use dot notation. To match previous getData solution in jPlayer 1.
		option : function(key, value) {
			var options = key;

			// Enables use: options().  Returns a copy of options object
			if(arguments.length === 0) {
				return $.extend(true, {}, this.options);
			}

			if( typeof key === "string") {
				var keys = key.split(".");

				// Enables use: options("someOption")  Returns a copy of the option. Supports dot notation.
				if(value === undefined) {

					var opt = $.extend(true, {}, this.options);
					for(var i = 0; i < keys.length; i++) {
						if(opt[keys[i]] !== undefined) {
							opt = opt[keys[i]];
						} else {
							this._warning({
								type : $.jPlayer.warning.OPTION_KEY,
								context : key,
								message : $.jPlayer.warningMsg.OPTION_KEY,
								hint : $.jPlayer.warningHint.OPTION_KEY
							});
							return undefined;
						}
					}
					return opt;
				}

				// Enables use: options("someOptionObject", someObject}).  Creates: {someOptionObject:someObject}
				// Enables use: options("someOption", someValue).  Creates: {someOption:someValue}
				// Enables use: options("someOptionObject.someOption", someValue).  Creates: {someOptionObject:{someOption:someValue}}

				options = {};
				var opts = options;

				for(var j = 0; j < keys.length; j++) {
					if(j < keys.length - 1) {
						opts[keys[j]] = {};
						opts = opts[keys[j]];
					} else {
						opts[keys[j]] = value;
					}
				}
			}

			// Otherwise enables use: options(optionObject).  Uses original object (the key)

			this._setOptions(options);

			return this;
		},
		_setOptions : function(options) {
			var self = this;
			$.each(options, function(key, value) {// This supports the 2 level depth that the options of jPlayer has. Would review if we ever need more depth.
				self._setOption(key, value);
			});
			return this;
		},
		_setOption : function(key, value) {
			var self = this;

			// The ability to set options is limited at this time.

			switch(key) {
				case "volume" :
					this.volume(value);
					break;
				case "muted" :
					this._muted(value);
					break;
				case "cssSelectorAncestor" :
					this._cssSelectorAncestor(value);
					// Set and refresh all associations for the new ancestor.
					break;
				case "cssSelector" :
					$.each(value, function(fn, cssSel) {
						self._cssSelector(fn, cssSel);
						// NB: The option is set inside this function, after further validity checks.
					});
					break;
				case "fullScreen" :
					if(this.options[key] !== value) {// if changed
						this._removeUiClass();
						this.options[key] = value;
						this._refreshSize();
					}
					break;
				case "size" :
					if(!this.options.fullScreen && this.options[key].cssClass !== value.cssClass) {
						this._removeUiClass();
					}
					this.options[key] = $.extend({}, this.options[key], value);
					// store a merged copy of it, incase not all properties changed.
					this._refreshSize();
					break;
				case "sizeFull" :
					if(this.options.fullScreen && this.options[key].cssClass !== value.cssClass) {
						this._removeUiClass();
					}
					this.options[key] = $.extend({}, this.options[key], value);
					// store a merged copy of it, incase not all properties changed.
					this._refreshSize();
					break;
				case "autohide" :
					this.options[key] = $.extend({}, this.options[key], value);
					// store a merged copy of it, incase not all properties changed.
					this._updateAutohide();
					break;
				case "loop" :
					this._loop(value);
					break;
				case "nativeVideoControls" :
					this.options[key] = $.extend({}, this.options[key], value);
					// store a merged copy of it, incase not all properties changed.
					this.status.nativeVideoControls = this._uaBlocklist(this.options.nativeVideoControls);
					this._restrictNativeVideoControls();
					this._updateNativeVideoControls();
					break;
				case "noFullScreen" :
					this.options[key] = $.extend({}, this.options[key], value);
					// store a merged copy of it, incase not all properties changed.
					this.status.nativeVideoControls = this._uaBlocklist(this.options.nativeVideoControls);
					// Need to check again as noFullScreen can depend on this flag and the restrict() can override it.
					this.status.noFullScreen = this._uaBlocklist(this.options.noFullScreen);
					this._restrictNativeVideoControls();
					this._updateButtons();
					break;
				case "noVolume" :
					this.options[key] = $.extend({}, this.options[key], value);
					// store a merged copy of it, incase not all properties changed.
					this.status.noVolume = this._uaBlocklist(this.options.noVolume);
					this._updateVolume();
					this._updateMute();
					break;
				case "emulateHtml" :
					if(this.options[key] !== value) {// To avoid multiple event handlers being created, if true already.
						this.options[key] = value;
						if(value) {
							this._emulateHtmlBridge();
						} else {
							this._destroyHtmlBridge();
						}
					}
					break;
			}

			return this;
		},
		// End of: (Options code adapted from ui.widget.js)

		_refreshSize : function() {
			this._setSize();
			// update status and jPlayer element size
			this._addUiClass();
			// update the ui class
			this._updateSize();
			// update internal sizes
			this._updateButtons();
			this._updateAutohide();
			this._trigger($.jPlayer.event.resize);
		},
		_setSize : function() {
			// Determine the current size from the options
			if(this.options.fullScreen) {
				this.status.width = this.options.sizeFull.width;
				this.status.height = this.options.sizeFull.height;
				this.status.cssClass = this.options.sizeFull.cssClass;
			} else {
				this.status.width = this.options.size.width;
				this.status.height = this.options.size.height;
				this.status.cssClass = this.options.size.cssClass;
			}

			// Set the size of the jPlayer area.
			this.element.css({
				'width' : this.status.width,
				'height' : this.status.height
			});
		},
		_addUiClass : function() {
			if(this.ancestorJq.length) {
				this.ancestorJq.addClass(this.status.cssClass);
			}
		},
		_removeUiClass : function() {
			if(this.ancestorJq.length) {
				this.ancestorJq.removeClass(this.status.cssClass);
			}
		},
		_updateSize : function() {
			// The poster uses show/hide so can simply resize it.
			this.internal.poster.jq.css({
				'width' : this.status.width,
				'height' : this.status.height
			});

			// Video html or flash resized if necessary at this time, or if native video controls being used.
			if(!this.status.waitForPlay && this.html.active && this.status.video || this.html.video.available && this.html.used && this.status.nativeVideoControls) {
				this.internal.video.jq.css({
					'width' : this.status.width,
					'height' : this.status.height
				});
			} else if(!this.status.waitForPlay && this.flash.active && this.status.video) {
				this.internal.flash.jq.css({
					'width' : this.status.width,
					'height' : this.status.height
				});
			}
		},
		_updateAutohide : function() {
			var self = this, event = "mousemove.jPlayer", namespace = ".jPlayerAutohide", eventType = event + namespace, handler = function() {
				self.css.jq.gui.fadeIn(self.options.autohide.fadeIn, function() {
					clearTimeout(self.internal.autohideId);
					self.internal.autohideId = setTimeout(function() {
						self.css.jq.gui.fadeOut(self.options.autohide.fadeOut);
					}, self.options.autohide.hold);
				});
			};
			if(this.css.jq.gui.length) {

				// End animations first so that its callback is executed now.
				// Otherwise an in progress fadeIn animation still has the callback to fadeOut again.
				this.css.jq.gui.stop(true, true);

				// Removes the fadeOut operation from the fadeIn callback.
				clearTimeout(this.internal.autohideId);

				this.element.unbind(namespace);
				this.css.jq.gui.unbind(namespace);

				if(!this.status.nativeVideoControls) {
					if(this.options.fullScreen && this.options.autohide.full || !this.options.fullScreen && this.options.autohide.restored) {
						this.element.bind(eventType, handler);
						this.css.jq.gui.bind(eventType, handler);
						this.css.jq.gui.hide();
					} else {
						this.css.jq.gui.show();
					}
				} else {
					this.css.jq.gui.hide();
				}
			}
		},
		fullScreen : function() {
			this._setOption("fullScreen", true);
		},
		restoreScreen : function() {
			this._setOption("fullScreen", false);
		},
		_html_initMedia : function() {
			this.htmlElement.media.src = this.status.src;

			if(this.options.preload !== 'none') {
				this._html_load();
				// See function for comments
			}
			this._trigger($.jPlayer.event.timeupdate);
			// The flash generates this event for its solution.
		},
		_html_setAudio : function(media) {
			var self = this;
			// Always finds a format due to checks in setMedia()
			$.each(this.formats, function(priority, format) {
				if(self.html.support[format] && media[format]) {
					self.status.src = media[format];
					self.status.format[format] = true;
					self.status.formatType = format;
					return false;
				}
			});
			this.htmlElement.media = this.htmlElement.audio;
			this._html_initMedia();
		},
		_html_setVideo : function(media) {
			var self = this;
			// Always finds a format due to checks in setMedia()
			$.each(this.formats, function(priority, format) {
				if(self.html.support[format] && media[format]) {
					self.status.src = media[format];
					self.status.format[format] = true;
					self.status.formatType = format;
					return false;
				}
			});
			if(this.status.nativeVideoControls) {
				this.htmlElement.video.poster = this._validString(media.poster) ? media.poster : "";
			}
			this.htmlElement.media = this.htmlElement.video;
			this._html_initMedia();
		},
		_html_resetMedia : function() {
			if(this.htmlElement.media) {
				if(this.htmlElement.media.id === this.internal.video.id && !this.status.nativeVideoControls) {
					this.internal.video.jq.css({
						'width' : '0px',
						'height' : '0px'
					});
				}
				this.htmlElement.media.pause();
			}
		},
		_html_clearMedia : function() {
			if(this.htmlElement.media) {
				this.htmlElement.media.src = "";
				this.htmlElement.media.load();
				// Stops an old, "in progress" download from continuing the download. Triggers the loadstart, error and emptied events, due to the empty src. Also an abort event if a download was in progress.
			}
		},
		_html_load : function() {
			// This function remains to allow the early HTML5 browsers to work, such as Firefox 3.6
			// A change in the W3C spec for the media.load() command means that this is no longer necessary.
			// This command should be removed and actually causes minor undesirable effects on some browsers. Such as loading the whole file and not only the metadata.
			if(this.status.waitForLoad) {
				this.status.waitForLoad = false;
				this.htmlElement.media.load();
			}
			clearTimeout(this.internal.htmlDlyCmdId);
		},
		_html_play : function(time) {
			var self = this;
			this._html_load();
			// Loads if required and clears any delayed commands.

			this.htmlElement.media.play();
			// Before currentTime attempt otherwise Firefox 4 Beta never loads.

			if(!isNaN(time)) {
				try {
					this.htmlElement.media.currentTime = time;
				} catch(err) {
					this.internal.htmlDlyCmdId = setTimeout(function() {
						self.play(time);
					}, 100);
					return;
					// Cancel execution and wait for the delayed command.
				}
			}
			this._html_checkWaitForPlay();
		},
		_html_pause : function(time) {
			var self = this;

			if(time > 0) {// We do not want the stop() command, which does pause(0), causing a load operation.
				this._html_load();
				// Loads if required and clears any delayed commands.
			} else {
				clearTimeout(this.internal.htmlDlyCmdId);
			}

			// Order of these commands is important for Safari (Win) and IE9. Pause then change currentTime.
			this.htmlElement.media.pause();

			if(!isNaN(time)) {
				try {
					this.htmlElement.media.currentTime = time;
				} catch(err) {
					this.internal.htmlDlyCmdId = setTimeout(function() {
						self.pause(time);
					}, 100);
					return;
					// Cancel execution and wait for the delayed command.
				}
			}
			if(time > 0) {// Avoids a setMedia() followed by stop() or pause(0) hiding the video play button.
				this._html_checkWaitForPlay();
			}
		},
		_html_playHead : function(percent) {
			var self = this;
			this._html_load();
			// Loads if required and clears any delayed commands.
			try {
				if(( typeof this.htmlElement.media.seekable === "object") && (this.htmlElement.media.seekable.length > 0)) {
					this.htmlElement.media.currentTime = percent * this.htmlElement.media.seekable.end(this.htmlElement.media.seekable.length - 1) / 100;
				} else if(this.htmlElement.media.duration > 0 && !isNaN(this.htmlElement.media.duration)) {
					this.htmlElement.media.currentTime = percent * this.htmlElement.media.duration / 100;
				} else {
					throw "e";
				}
			} catch(err) {
				this.internal.htmlDlyCmdId = setTimeout(function() {
					self.playHead(percent);
				}, 100);
				return;
				// Cancel execution and wait for the delayed command.
			}
			if(!this.status.waitForLoad) {
				this._html_checkWaitForPlay();
			}
		},
		_html_checkWaitForPlay : function() {
			if(this.status.waitForPlay) {
				this.status.waitForPlay = false;
				if(this.css.jq.videoPlay.length) {
					this.css.jq.videoPlay.hide();
				}
				if(this.status.video) {
					this.internal.poster.jq.hide();
					this.internal.video.jq.css({
						'width' : this.status.width,
						'height' : this.status.height
					});
				}
			}
		},
		_html_volume : function(v) {
			if(this.html.audio.available) {
				this.htmlElement.audio.volume = v;
			}
			if(this.html.video.available) {
				this.htmlElement.video.volume = v;
			}
		},
		_html_mute : function(m) {
			if(this.html.audio.available) {
				this.htmlElement.audio.muted = m;
			}
			if(this.html.video.available) {
				this.htmlElement.video.muted = m;
			}
		},
		_flash_setAudio : function(media) {
			var self = this;
			try {
				// Always finds a format due to checks in setMedia()
				$.each(this.formats, function(priority, format) {
					if(self.flash.support[format] && media[format]) {
						switch (format) {
							case "m4a" :
							case "fla" :
								self._getMovie().fl_setAudio_m4a(media[format]);
								break;
							case "mp3" :
								self._getMovie().fl_setAudio_mp3(media[format]);
								break;
						}
						self.status.src = media[format];
						self.status.format[format] = true;
						self.status.formatType = format;
						return false;
					}
				});
				if(this.options.preload === 'auto') {
					this._flash_load();
					this.status.waitForLoad = false;
				}
			} catch(err) {
				this._flashError(err);
			}
		},
		_flash_setVideo : function(media) {
			var self = this;
			try {
				// Always finds a format due to checks in setMedia()
				$.each(this.formats, function(priority, format) {
					if(self.flash.support[format] && media[format]) {
						switch (format) {
							case "m4v" :
							case "flv" :
								self._getMovie().fl_setVideo_m4v(media[format]);
								break;
						}
						self.status.src = media[format];
						self.status.format[format] = true;
						self.status.formatType = format;
						return false;
					}
				});
				if(this.options.preload === 'auto') {
					this._flash_load();
					this.status.waitForLoad = false;
				}
			} catch(err) {
				this._flashError(err);
			}
		},
		_flash_resetMedia : function() {
			this.internal.flash.jq.css({
				'width' : '0px',
				'height' : '0px'
			});
			// Must do via CSS as setting attr() to zero causes a jQuery error in IE.
			this._flash_pause(NaN);
		},
		_flash_clearMedia : function() {
			try {
				this._getMovie().fl_clearMedia();
			} catch(err) {
				this._flashError(err);
			}
		},
		_flash_load : function() {
			try {
				this._getMovie().fl_load();
			} catch(err) {
				this._flashError(err);
			}
			this.status.waitForLoad = false;
		},
		_flash_play : function(time) {
			try {
				this._getMovie().fl_play(time);
			} catch(err) {
				this._flashError(err);
			}
			this.status.waitForLoad = false;
			this._flash_checkWaitForPlay();
		},
		_flash_pause : function(time) {
			try {
				this._getMovie().fl_pause(time);
			} catch(err) {
				this._flashError(err);
			}
			if(time > 0) {// Avoids a setMedia() followed by stop() or pause(0) hiding the video play button.
				this.status.waitForLoad = false;
				this._flash_checkWaitForPlay();
			}
		},
		_flash_playHead : function(p) {
			try {
				this._getMovie().fl_play_head(p);
			} catch(err) {
				this._flashError(err);
			}
			if(!this.status.waitForLoad) {
				this._flash_checkWaitForPlay();
			}
		},
		_flash_checkWaitForPlay : function() {
			if(this.status.waitForPlay) {
				this.status.waitForPlay = false;
				if(this.css.jq.videoPlay.length) {
					this.css.jq.videoPlay.hide();
				}
				if(this.status.video) {
					this.internal.poster.jq.hide();
					this.internal.flash.jq.css({
						'width' : this.status.width,
						'height' : this.status.height
					});
				}
			}
		},
		_flash_volume : function(v) {
			try {
				this._getMovie().fl_volume(v);
			} catch(err) {
				this._flashError(err);
			}
		},
		_flash_mute : function(m) {
			try {
				this._getMovie().fl_mute(m);
			} catch(err) {
				this._flashError(err);
			}
		},
		_getMovie : function() {
			return document[this.internal.flash.id];
		},
		_checkForFlash : function(version) {
			// Function checkForFlash adapted from FlashReplace by Robert Nyman
			// http://code.google.com/p/flashreplace/
			var flashIsInstalled = false;
			var flash;
			if(window.ActiveXObject) {
				try {
					flash = new ActiveXObject(("ShockwaveFlash.ShockwaveFlash." + version));
					flashIsInstalled = true;
				} catch(e) {
					// Throws an error if the version isn't available
				}
			} else if(navigator.plugins && navigator.mimeTypes.length > 0) {
				flash = navigator.plugins["Shockwave Flash"];
				if(flash) {
					var flashVersion = navigator.plugins["Shockwave Flash"].description.replace(/.*\s(\d+\.\d+).*/, "$1");
					if(flashVersion >= version) {
						flashIsInstalled = true;
					}
				}
			}
			return flashIsInstalled;
		},
		_validString : function(url) {
			return (url && typeof url === "string");
			// Empty strings return false
		},
		_limitValue : function(value, min, max) {
			return (value < min) ? min : ((value > max) ? max : value);
		},
		_urlNotSetError : function(context) {
			this._error({
				type : $.jPlayer.error.URL_NOT_SET,
				context : context,
				message : $.jPlayer.errorMsg.URL_NOT_SET,
				hint : $.jPlayer.errorHint.URL_NOT_SET
			});
		},
		_flashError : function(error) {
			var errorType;
			if(!this.internal.ready) {
				errorType = "FLASH";
			} else {
				errorType = "FLASH_DISABLED";
			}
			this._error({
				type : $.jPlayer.error[errorType],
				context : this.internal.flash.swf,
				message : $.jPlayer.errorMsg[errorType] + error.message,
				hint : $.jPlayer.errorHint[errorType]
			});
			// Allow the audio player to recover if display:none and then shown again, or with position:fixed on Firefox.
			// This really only affects audio in a media player, as an audio player could easily move the jPlayer element away from such issues.
			this.internal.flash.jq.css({
				'width' : '1px',
				'height' : '1px'
			});
		},
		_error : function(error) {
			this._trigger($.jPlayer.event.error, error);
			if(this.options.errorAlerts) {
				this._alert("Error!" + (error.message ? "\n\n" + error.message : "") + (error.hint ? "\n\n" + error.hint : "") + "\n\nContext: " + error.context);
			}
		},
		_warning : function(warning) {
			this._trigger($.jPlayer.event.warning, undefined, warning);
			if(this.options.warningAlerts) {
				this._alert("Warning!" + (warning.message ? "\n\n" + warning.message : "") + (warning.hint ? "\n\n" + warning.hint : "") + "\n\nContext: " + warning.context);
			}
		},
		_alert : function(message) {
			alert("jPlayer " + this.version.script + " : id='" + this.internal.self.id + "' : " + message);
		},
		_emulateHtmlBridge : function() {
			var self = this, methods = $.jPlayer.emulateMethods;

			// Emulate methods on jPlayer's DOM element.
			$.each($.jPlayer.emulateMethods.split(/\s+/g), function(i, name) {
				self.internal.domNode[name] = function(arg) {
					self[name](arg);
				};
			});
			// Bubble jPlayer events to its DOM element.
			$.each($.jPlayer.event, function(eventName, eventType) {
				var nativeEvent = true;
				$.each($.jPlayer.reservedEvent.split(/\s+/g), function(i, name) {
					if(name === eventName) {
						nativeEvent = false;
						return false;
					}
				});
				if(nativeEvent) {
					self.element.bind(eventType + ".jPlayer.jPlayerHtml", function() {// With .jPlayer & .jPlayerHtml namespaces.
						self._emulateHtmlUpdate();
						var domEvent = document.createEvent("Event");
						domEvent.initEvent(eventName, false, true);
						self.internal.domNode.dispatchEvent(domEvent);
					});
				}
				// The error event would require a special case
			});
			// IE9 has a readyState property on all elements. The document should have it, but all (except media) elements inherit it in IE9. This conflicts with Popcorn, which polls the readyState.
		},
		_emulateHtmlUpdate : function() {
			var self = this;

			$.each($.jPlayer.emulateStatus.split(/\s+/g), function(i, name) {
				self.internal.domNode[name] = self.status[name];
			});
			$.each($.jPlayer.emulateOptions.split(/\s+/g), function(i, name) {
				self.internal.domNode[name] = self.options[name];
			});
		},
		_destroyHtmlBridge : function() {
			var self = this;

			// Bridge event handlers are also removed by destroy() through .jPlayer namespace.
			this.element.unbind(".jPlayerHtml");
			// Remove all event handlers created by the jPlayer bridge. So you can change the emulateHtml option.

			// Remove the methods and properties
			var emulated = $.jPlayer.emulateMethods + " " + $.jPlayer.emulateStatus + " " + $.jPlayer.emulateOptions;
			$.each(emulated.split(/\s+/g), function(i, name) {
				delete self.internal.domNode[name];
			});
		}
	};

	$.jPlayer.error = {
		FLASH : "e_flash",
		FLASH_DISABLED : "e_flash_disabled",
		NO_SOLUTION : "e_no_solution",
		NO_SUPPORT : "e_no_support",
		URL : "e_url",
		URL_NOT_SET : "e_url_not_set",
		VERSION : "e_version"
	};

	$.jPlayer.errorMsg = {
		FLASH : "jPlayer's Flash fallback is not configured correctly, or a command was issued before the jPlayer Ready event. Details: ", // Used in: _flashError()
		FLASH_DISABLED : "jPlayer's Flash fallback has been disabled by the browser due to the CSS rules you have used. Details: ", // Used in: _flashError()
		NO_SOLUTION : "No solution can be found by jPlayer in this browser. Neither HTML nor Flash can be used.", // Used in: _init()
		NO_SUPPORT : "It is not possible to play any media format provided in setMedia() on this browser using your current options.", // Used in: setMedia()
		URL : "Media URL could not be loaded.", // Used in: jPlayerFlashEvent() and _addHtmlEventListeners()
		URL_NOT_SET : "Attempt to issue media playback commands, while no media url is set.", // Used in: load(), play(), pause(), stop() and playHead()
		VERSION : "jPlayer " + $.jPlayer.prototype.version.script + " needs Jplayer.swf version " + $.jPlayer.prototype.version.needFlash + " but found " // Used in: jPlayerReady()
	};

	$.jPlayer.errorHint = {
		FLASH : "Check your swfPath option and that Jplayer.swf is there.",
		FLASH_DISABLED : "Check that you have not display:none; the jPlayer entity or any ancestor.",
		NO_SOLUTION : "Review the jPlayer options: support and supplied.",
		NO_SUPPORT : "Video or audio formats defined in the supplied option are missing.",
		URL : "Check media URL is valid.",
		URL_NOT_SET : "Use setMedia() to set the media URL.",
		VERSION : "Update jPlayer files."
	};

	$.jPlayer.warning = {
		CSS_SELECTOR_COUNT : "e_css_selector_count",
		CSS_SELECTOR_METHOD : "e_css_selector_method",
		CSS_SELECTOR_STRING : "e_css_selector_string",
		OPTION_KEY : "e_option_key"
	};

	$.jPlayer.warningMsg = {
		CSS_SELECTOR_COUNT : "The number of css selectors found did not equal one: ",
		CSS_SELECTOR_METHOD : "The methodName given in jPlayer('cssSelector') is not a valid jPlayer method.",
		CSS_SELECTOR_STRING : "The methodCssSelector given in jPlayer('cssSelector') is not a String or is empty.",
		OPTION_KEY : "The option requested in jPlayer('option') is undefined."
	};

	$.jPlayer.warningHint = {
		CSS_SELECTOR_COUNT : "Check your css selector and the ancestor.",
		CSS_SELECTOR_METHOD : "Check your method name.",
		CSS_SELECTOR_STRING : "Check your css selector is a string.",
		OPTION_KEY : "Check your option name."
	};

})(jQuery);

/*SMINT*/


/** prepares the drawing (starts ajax call for waveform file
 * 	
 */
/*function draw(current, factor, id) {

	var list = ($("#jquery_jplayer_" + id).jPlayer("option", "playlist"));
	var a_canvas = document.getElementById("a");
	if(a_canvas.getContext == undefined) {
		// we do not have a canvas element so show the browser warning again
		BrowserDetection.init();
		return;
	}

	//If its IE
	if($.browser.msie && parseInt($.browser.version, 10) >= 8 && window.XDomainRequest) {
		//Use Microsoft XDR
		var xdr = new XDomainRequest();
		if(xdr) {
			xdr.onerror = function() {
				$('.metadata').html('error');
			};
			xdr.ontimeout = function() {
				$('.metadata').html('timeout');
			};
			xdr.onprogress = function() {
				$('.metadata').html('progress');
			};
			xdr.onload = function() {
				$('.metadata').html('load');
				wfdata = xdr.responseText.split(',');

				var maxval = 0
				var samples = wfdata.length;
				
				$('#waveform_status_msg').hide();

				for(var i = 0; i < samples; i++) {
					if(Math.abs(wfdata[i]) > maxval) {
						maxval = Math.abs(wfdata[i]);
					}
				}
				range_min = -Math.pow(maxval, factor);
				range_max = Math.pow(maxval, factor);
				a_canvas.height = range_max - range_min;
				a_canvas.width = samples;
				a_canvas.style.background = "#FFF";

				var middle = (range_max - range_min) / 2;

				for(var x = 0; x < samples; x++) {
					h = Math.pow(Math.abs(wfdata[x]), factor);

					context.lineTo(x, Math.round(middle) + (h));
					context.lineTo(x, Math.round(middle) - (h));
				}

				context.strokeStyle = "#4D4D4D";
				context.stroke();
			};
			xdr.timeout = 5000;
			xdr.open("POST", list[current].waveformfile);
			xdr.send();

		}
	} else {

		$.ajax({
			async : true,  
			url : list[current].waveformfile,
			dataType : "text",
			type : "GET",
			crossDomain : true,
			success : function(data) {
				doDraw(current, factor, id, data.split(','));

			},
			error : function(xhr, textStatus, errorThrown) {
				alert(errorThrown);
				$('#waveform_status_msg').val('ERROR loading waveform data'); 
			}
		});

	}
	
}*/


/** Render the waveform
 * @param current  The currently selected tracks id. int
 * @param factor   The waveform factor. float
 * @param id		  The id of the Jplayer. int
 */
/*function doDraw(current, factor, id, wfdata) {

	var list = ($("#jquery_jplayer_" + id).jPlayer("option", "playlist"));
	var a_canvas = document.getElementById("a");
	if(a_canvas.getContext == undefined) {
		// we do not have a canvas element so show the browser warning again
		BrowserDetection.init();
		return;
	}
	var context = a_canvas.getContext("2d");
	$('#waveform_status_msg').hide();
	context.clearRect(0, 0, a_canvas.width, a_canvas.height);
	var h = 0;

	
		var maxval = 0
		var samples = wfdata.length;

		for(var i = 0; i < samples; i++) {
			if(Math.abs(wfdata[i]) > maxval) {
				maxval = Math.abs(wfdata[i]);
			}
		}
		range_min = -Math.pow(maxval, factor);
		range_max = Math.pow(maxval, factor);
		a_canvas.height = range_max - range_min;
		a_canvas.width = samples;
		a_canvas.style.background = "#FFF";
		context.beginPath();
		var middle = (range_max - range_min) / 2;

		for(var x = 0; x < samples; x++) {
			h = Math.pow(Math.abs(wfdata[x]), factor);

			context.lineTo(x, Math.round(middle) + (h));
			context.lineTo(x, Math.round(middle) - (h));
		}

		context.strokeStyle = "#4D4D4D";
		context.stroke();
	

}*/

/** Scroll the waveform
 * @param fs  The width of the waveform viewport. int
 * @param scrollbar The elemnt thats used as a scroll bar. string
 */
function wscroll(fs, scrollbar) {

	//scrollpane parts
	var scrollPane = $('.scroll-pane');
	var scrollContent = $('.scroll-content');

	//change overflow to hidden now that slider handles the scrolling
	scrollPane.css('overflow', 'hidden');

	//size scrollbar and handle proportionally to scroll distance
	function sizeScrollbar() {
		var remainder = scrollContent.width() - scrollPane.width();
		var proportion = remainder / scrollContent.width();
		var handleSize = scrollPane.width() - (proportion * scrollPane.width());

	}

	//reset slider value based on scroll content position
	function resetValue() {
		var remainder = scrollPane.width() - scrollContent.width();
		var leftVal = scrollContent.css('margin-left') == 'auto' ? 0 : parseInt(scrollContent.css('margin-left'));
		var percentage = Math.round(leftVal / remainder * 100);
		scrollbar.slider("value", percentage);
	}

	//if the slider is 100% and window gets larger, reveal content
	function reflowContent() {
		var showing = scrollContent.width() + parseInt(scrollContent.css('margin-left'));
		var gap = scrollPane.width() - showing;
		if(gap > 0) {
			scrollContent.css('margin-left', parseInt(scrollContent.css('margin-left')) + gap);
		}
	}

}

/**Show and position the selected segment on the waveform if its in the FOV
 * @param reset Check if waveform is clicked to remove the segment. boolean
 */
function showSegmentSelector(reset, id) {
	var smol = $("#segment-highlight").offset().left
	var smw = $("#segment-highlight").width();
	var osl = $(".overview-seek").offset().left;
	var fovw = $("#overview-slidermax").position().left - $("#overview-slidermin").position().left;
	//FOV width

	if(reset === false) {
		if(smol <= osl + $("#overview-slidermax").position().left && smol + smw > osl + $("#overview-slidermin").position().left) {
			if(smol <= osl + $("#overview-slidermax").position().left) {
				if((smol + smw) >= osl + $("#overview-slidermax").position().left) {
					var segmin = osl + $("#overview-slidermax").position().left - smol;
					var segpermin = segmin / ($("#overview-slidermax").position().left - $("#overview-slidermin").position().left);
					var sp = segpermin * 100;
					var leftp = 100 - (sp);
					$("#fov-slidermin").css({
						left : leftp + "%"
					});
					$("#fov-slidermax").css({
						left : 100 + "%"
					});
					$(".fov-seek .ui-slider-range").css({
						left : leftp + "%",
						width : sp + "%"
					});
				}
				if((smol + smw) < osl + $("#overview-slidermax").position().left) {
					var segmin = osl + $("#overview-slidermax").position().left - smol;
					var segmax = osl + $("#overview-slidermax").position().left - (smol + smw);
					var segpermin = segmin / ($("#overview-slidermax").position().left - $("#overview-slidermin").position().left);
					var segpermax = segmax / ($("#overview-slidermax").position().left - $("#overview-slidermin").position().left);
					var leftp = 100 - (segpermin * 100);
					var rightp = 100 - (segpermax * 100);
					$("#fov-slidermin").css({
						left : leftp + "%"
					});
					$("#fov-slidermax").css({
						left : rightp + "%"
					});
					$(".fov-seek .ui-slider-range").css({
						left : leftp + "%",
						width : (rightp - leftp) + "%"
					});
				}
			}
			$("#fov-slidermin").css({
				display : "block"
			});
			$("#fov-slidermax").css({
				display : "block"
			});
			$(".fov-seek .ui-slider-range").css({
				display : "block"
			});
		} else if($("#overview-slidermax").position().left - $("#overview-slidermin").position().left == $(".fov-seek").width()) {
			$("#fov-slidermin").css({
				display : "block"
			});
			$("#fov-slidermax").css({
				display : "block"
			});
			$(".fov-seek .ui-slider-range").css({
				display : "block"
			});
			if((smol + smw) >= osl + $("#overview-slidermax").position().left) {
				var segmin = osl + $("#overview-slidermax").position().left - smol;
				var segpermin = segmin / ($("#overview-slidermax").position().left - $("#overview-slidermin").position().left);
				var sp = segpermin * 100;
				var leftp = 100 - (sp);
				$("#fov-slidermin").css({
					left : leftp + "%"
				});
				$("#fov-slidermax").css({
					left : 100 + "%"
				});
				$(".fov-seek .ui-slider-range").css({
					left : leftp + "%",
					width : sp + "%"
				});
			}
			if((smol + smw) < osl + $("#overview-slidermax").position().left) {
				var segmin = osl + $("#overview-slidermax").position().left - smol;
				var segmax = osl + $("#overview-slidermax").position().left - (smol + smw);
				var segpermin = segmin / ($("#overview-slidermax").position().left - $("#overview-slidermin").position().left);
				var segpermax = segmax / ($("#overview-slidermax").position().left - $("#overview-slidermin").position().left);
				var leftp = 100 - (segpermin * 100);
				var rightp = 100 - (segpermax * 100);
				$("#fov-slidermin").css({
					left : leftp + "%"
				});
				$("#fov-slidermax").css({
					left : rightp + "%"
				});
				$(".fov-seek .ui-slider-range").css({
					left : leftp + "%",
					width : (rightp - leftp) + "%"
				});
			}
		} else if($("#overview-slidermin").position().left == 0) {
			$("#fov-slidermin").css({
				display : "block"
			});
			$("#fov-slidermax").css({
				display : "block"
			});
			$(".fov-seek .ui-slider-range").css({
				display : "block"
			});
			if((smol + smw) >= osl + $("#overview-slidermax").position().left) {
				var segmin = osl + $("#overview-slidermax").position().left - smol;
				var segpermin = segmin / ($("#overview-slidermax").position().left - $("#overview-slidermin").position().left);
				var leftp = 100 - (segpermin * 100);
				$("#fov-slidermin").css({
					left : leftp + "%"
				});
				$("#fov-slidermax").css({
					left : 100 + "%"
				});
				$(".fov-seek .ui-slider-range").css({
					left : leftp + "%",
					width : segpermin * 100 + "%"
				});
			}
			if((smol + smw) < osl + $("#overview-slidermax").position().left) {
				var segmin = osl + $("#overview-slidermax").position().left - smol;
				var segmax = osl + $("#overview-slidermax").position().left - (smol + smw);
				var segpermin = segmin / ($("#overview-slidermax").position().left - $("#overview-slidermin").position().left);
				var segpermax = segmax / ($("#overview-slidermax").position().left - $("#overview-slidermin").position().left);
				var leftp = 100 - (segpermin * 100);
				var rightp = 100 - (segpermax * 100);
				$("#fov-slidermin").css({
					left : leftp + "%"
				});
				$("#fov-slidermax").css({
					left : rightp + "%"
				});
				$(".fov-seek .ui-slider-range").css({
					left : leftp + "%",
					width : (rightp - leftp) + "%"
				});
			}
		} else {
			$("#fov-slidermin").css({
				display : "none"
			});
			$("#fov-slidermax").css({
				display : "none"
			});
			$(".fov-seek .ui-slider-range").css({
				display : "none"
			});
		}

	} else {// if(reset === false)
		$('#fov-slidermin').css({
			display : "none"
		});
		$('#fov-slidermax').css({
			display : "none"
		});
	} // else of if(reset === false)

	// update data for external use
	//updateSegmentdataForExternalUse(id);
}

/** creates a selection / segment in the waveform drawer
 * <p>Prerequisite: duration must be known (audio.status.duration)
 * @param id	id of player. Player is expected in node '#jquery_jplayer_ID'
 * @param start	start of selection in ms. Integer
 * @param end	end of selection in ms. Integer
 * @param dr	duration of the track in seconds. Numeric
 */
function posSegment(id, start, end, dr) {

	var sp = $(".fov-seek").width();
	var s = start / 1000;
	var e = end / 1000;
	var leftHand = (s / dr) * 100;
	var rightHand = (e / dr) * 100;

	$("#fov-slidermin").css({
		left : leftHand + "%",
		background : "#1CA2D8"
	});
	$("#fov-slidermax").css({
		left : rightHand + "%",
		background : "#1CA2D8"
	});
	switch(seedsong_uimodel) {
		//UI model 0
		case 0:
		default:
			$("#segment-highlight").css({
				width : (rightHand - leftHand) + "%",
				left : leftHand + "%",
				background : "#1CA2D8"
			});
			break;
		case 1:
			// no-op
			break;
	}

	$(".fov-seek .ui-slider-range").css({
		width : (rightHand - leftHand) + "%",
		left : leftHand + "%",
		background : "#1CA2D8"
	});
	$("#fov-slidermin").css({
		left: leftHand + "%"
	});
	$("#fov-slidermax").css({
		left: (leftHand+(rightHand - leftHand)) + "%"
	});
	$("#jquery_jplayer_" + id).jPlayer("setMedia", {
		mp3 : $("#jquery_jplayer_"+id).jPlayer("option", "playlist")[0].audiofile_mp3,
		oga : $("#jquery_jplayer_"+id).jPlayer("option", "playlist")[0].audiofile_ogg
	});

}

/**Show metadata in the seed player
 * @param metatext		the text to be shown
 */
function insertMetadataToSeedplayer(metatext) {
	$(".metadata").text(metatext);
}

/**Check if the selected segment is valid
 * @param minSec
 * @param maxSec
 * @param clickPos Position of the click in the waveform.  px
 * @param val0	   Value of the minimum handle. int
 * @param val1     Value of the maximum handle. int
 */
function checkSegment(minSec, maxSec, clickPos, val0, val1) {

	if((maxSec - minSec) < 6 && (maxSeconds - minSeconds) >= 0) {//If selection is less than 6 seconds
		endPos = clickPos + (6 / $(".scroll-content").width() * dr);
		endPos = endPos / $(".fov-seek").width() * dr;
		var w = val1 - clickPos;
		$(".fov-seek .ui-slider-range").css('background-color', '#F15A24');
		$('#fov-slidermin').css({
			background : "#F15A24"
		});
		$('#fov-slidermax').css({
			background : "#F15A24"
		});
		$('#fov-slidermin').css({
			left : clickPos + "px"
		});
		$('#fov-slidermax').css({
			left : val1 + "px"
		});
		$(".fov-time-min").css({
			color : "#F15A24"
		});
		$(".fov-time-max").css({
			color : "#F15A24"
		});
		hm = $(".overview-seek").slider('values', 0);
		le = hm + (clickPos * ($(".scroll-pane").width() / $(".scroll-content").width()));
		$(".fov-seek .ui-slider-range").css({
			width : w + "px",
			left : clickPos + "px"
		});
		$("#segment-highlight").css({
			left : le + "px",
			width : w * ($(".scroll-pane").width() / $(".scroll-content").width()) + "px",
			background : "#F15A24"
		});
	} else if((maxSec - minSec) > 6) {
		var w = val1 - clickPos;
		$('.fov-seek #fov-slidermax').css({
			background : "#1CA2D8"
		});
		$(".fov-seek .ui-slider-range").css('background-color', '#1CA2D8');
		$('.fov-seek #fov-slidermin').css({
			background : "#1CA2D8"
		});
		$('#fov-slidermin').css({
			left : clickPos + "px"
		});
		$('#fov-slidermax').css({
			left : val1 + "px"
		});
		$(".fov-time-min").css({
			color : "#1CA2D8"
		});
		$(".fov-time-max").css({
			color : "#1CA2D8"
		});
		hm = $(".overview-seek").slider('values', 0);
		le = hm + (clickPos * ($(".scroll-pane").width() / $(".scroll-content").width()));
		$(".fov-seek .ui-slider-range").css({
			width : w + "px",
			left : clickPos + "px"
		});
		$("#segment-highlight").css({
			left : le + "px",
			width : w * ($(".scroll-pane").width() / $(".scroll-content").width()) + "px",
			background : "#1CA2D8"
		});
	}

	if((maxSec - minSec) > -6 && (maxSeconds - minSeconds) < 0) {//If selection is less than 6 seconds
		endPos = clickPos;
		var w = endPos - val1;
		hm = $(".overview-seek").slider('values', 0);
		le = hm + (val1 * ($(".scroll-pane").width() / $(".scroll-content").width()));
		$(".fov-seek .ui-slider-range").css('background-color', '#F15A24');
		$('#fov-slidermin').css('background-color', '#F15A24');
		$('#fov-slidermax').css('background-color', '#F15A24');
		$('#fov-slidermin').css({
			left : endPos + "px"
		});
		$('#fov-slidermax').css({
			left : val1 + "px"
		});
		$(".fov-seek .ui-slider-range").css({
			width : w + "px",
			left : val1 + "px"
		});
		$(".fov-time-min").css({
			color : "#F15A24"
		});
		$(".fov-time-max").css({
			color : "#F15A24"
		});
		$("#segment-highlight").css({
			left : le + "px",
			width : w * ($(".scroll-pane").width() / $(".scroll-content").width()) + "px",
			background : "#F15A24"
		});
	} else if((maxSec - minSec) < -6) {
		endPos = clickPos
		var w = endPos - val1;

		$('#fov-slidermin').css({
			left : endPos + "px"
		});
		$('#fov-slidermax').css({
			left : val1 + "px"
		});
		$(".fov-time-min").css({
			color : "#1CA2D8"
		});
		$(".fov-time-max").css({
			color : "#1CA2D8"
		});
		$(".fov-seek .ui-slider-range").css('background-color', '#1CA2D8');
		$('.fov-seek #fov-slidermin').css('background-color', '#1CA2D8');
		$('.fov-seek #fov-slidermax').css('background-color', '#1CA2D8');
		hm = $(".overview-seek").slider('values', 0);
		le = hm + (val1 * ($(".scroll-pane").width() / $(".scroll-content").width()));
		$(".fov-seek .ui-slider-range").css({
			width : w + "px",
			left : val1 + "px"
		});
		$("#segment-highlight").css({
			left : le + "px",
			width : w * ($(".scroll-pane").width() / $(".scroll-content").width()) + "px",
			background : "#1CA2D8"
		});
	}
}

/** After changing the selection, we set the defined variables and trigger the events
 * so that external JS (where Smintplayer is embedded) can make use of the data
 * @param id the id of the player (#jquery_jplayer_XXX)
 *
 */
function updateSegmentdataForExternalUse(id) {
	switch(seedsong_uimodel) {
		//UI model 0
		case 0:
			var audio = $("#jquery_jplayer_" + id).data("jPlayer");
			dr = audio.status.duration;
			var handmin = $("#segment-highlight").position().left;
			var handmax = handmin + $("#segment-highlight").width();
			var ovmin = (dr / $(".overview-seek").width()) * handmin;
			var ovmax = (dr / $(".overview-seek").width()) * handmax;

			//Start and End values
			if($("#segment-highlight").width() > 0) {
				if(ovmin < ovmax) {
					start = ovmin * 1000;
					end = ovmax * 1000;

				} else {
					end = ovmin * 1000;
					start = ovmax * 1000;

				}
			} else {
				start = 0;
				end = 0;
			}
			 
			var audio = $("#jquery_jplayer_" + id).data("jPlayer")
			dur = Math.round(audio.status.duration);

			start = (start  < 0)? 0 : start;
			end = (end > dur*1000)? dur*1000 : end;

			//Save values
			$(".fov-seek").attr({
				select_start : start,
				select_end : end,
				duration : dur
			});

			// trigger a custom event
			setTimeout(function() {
				$(".fov-seek").trigger('selectionChanged');
			}, 500);
			break;

		//UI model 1
		case 1:
			var audio = $("#jquery_jplayer_" + id).data("jPlayer");
			dr = audio.status.duration;
			var handmin = $("#fov-slidermin").position().left;
			var handmax = $("#fov-slidermax").position().left;
			var ovmin = (dr / $(".fov-seek").width()) * handmin;
			var ovmax = (dr / $(".fov-seek").width()) * handmax;

			//Start and End values
			if($(".fov-seek .ui-slider-range").width() > 0) {
				if(ovmin < ovmax) {
					start = ovmin * 1000;
					end = ovmax * 1000;

				} else {
					end = ovmin * 1000;
					start = ovmax * 1000;

				}
			} else {
				start = 0;
				end = 0;
			}
			
			var audio = $("#jquery_jplayer_" + id).data("jPlayer")
			dur = Math.round(audio.status.duration);
			
			start = (start  < 0)? 0 : start;
			end = (end > dur*1000)? dur*1000 : end;
			
			//Save values
			$(".fov-seek").attr({
				select_start : start,
				select_end : end,
				duration : dur
			});

			// trigger a custom event
			setTimeout(function() {
				$(".fov-seek").trigger('selectionChanged');
			}, 500);
			break;
	}
}

/** checks if canvas etc is supported on this browser
 * @return true if it is safe to draw the waveform, false otherwise
 */
function waveform_supported() {
	return (document.getElementById("a").getContext != undefined);
}

/** displays hint that this feature is not available on the current browser
 *
 */
function show_feature_disabled() {
	alert("We are sorry but this feature is not supported on your browser. We recommend to use Chrome or Safari.");
}

//------------------- Helper functions for showing and hiding stuff ---------------------

/** Opens or closes waveform drawer
 * @param id	id of player. Player is expected in node '#jquery_jplayer_ID'
 */
function toggleWaveformdrawer(id, doSlide) {

	switch(seedsong_uimodel) {
		case 0:
			// check if we can draw the waveform
			if(! waveform_supported()) {
				show_feature_disabled();
				return;
			}

			$('.wf-toggle').addClass('expandedtoggle');
			$('.overview-container').addClass('expandedoverview');
			$('.overview-seek .ui-slider-range').addClass('expandedhandle');
			fs = $('.fov-seek').width();

			//Waveform viewport width
			var wave_factor = $("#jquery_jplayer_" + id).jPlayer("option", "waveform_factor");

			//draw(0, wave_factor, id);
			if(doSlide) {
				if($(".fov-container").css('display') == 'block') {
					$(".fov-container").slideToggle("slow", function() {
						$(".wf-toggle").removeClass('expandedtoggle');
						$(".overview-container").removeClass('expandedoverview');
					});
				} else {
					$(".fov-container").slideToggle("slow");
					$(".wf-toggle").addClass('expandedtoggle');
					$(".overview-container").addClass('expandedoverview');
				}
			} else
				$(".fov-container").toggle();
			wscroll(fs);
			$("#overview-slidermin").toggle();
			$("#overview-slidermax").toggle();
			$(".ui-slider-range").toggle();
			$(".viewport").toggle();
			break;
		case 1:
			$(".ui-slider-range").toggle();
			
			break;
	}

}

//------------------- "Main " functions ---------------------

/**Initialize the main player
 * @param id	The id of the player. $("#jquery_jplayer_"+id) int
 */
function initMain(id) {
	
	var list = $("#jquery_jplayer_" + id).jPlayer("option", "playlist");	
	
	// Set the Waveform image URL
  	//$('.scroll-content').css({'background': 'url(' + list[0].waveformimage + ')'});
	$('.scroll-content').html('<img src="' + list[0].waveformimage + '" />');
	$('#waveform_status_msg').css({'z-index': '-1'});
	
 
	switch(seedsong_uimodel) {
		case 0:
			//Start of uimodel 0
			fs = $('.fov-seek').width();
			//Waveform viewport width
			osw = $(".overview-seek").width();
			//Width of the overview progressbar
			var clickPos;
			var mdown;
			var mup;
			var clickTime;
			var currentMS = 0;
			//Current hundreds
			$('.fov-time-min').hide();
			var calloutMinVisible = false;
			$('.fov-time-max').hide();
			var calloutMaxVisible = false;
			var wfdata = [];
			
			var wave_factor = $("#jquery_jplayer_" + id).jPlayer("option", "waveform_factor");
			var wave_resolution = $("#jquery_jplayer_" + id).jPlayer("option", "waveform_resolution");

			$.ajax({
				async : false, // Wait for waveform to load
				url : list[0].waveformfile,
				dataType : "text",
				type : "GET",
				crossDomain : true,
				success : function(data) {
					wfdata = data.split(',');

				},
				error : function(xhr, textStatus, errorThrown) {

				}
			});
			dataValues = wfdata.length;
			//Count the number of values

			//Start playing from the overview seekbar click position
			$(".overview-progress").click(function(e) {

				var audio = $("#jquery_jplayer_" + id).data("jPlayer");
				var elapsed = audio.status.currentPercentAbsolute;
				var x = (e.pageX);
				var c = $(".overview-progress").offset().left;
				var wrap = $(".overview-progress").width();
				var pos = (((x - c) / wrap) * 100);

				$("#jquery_jplayer_" + id).jPlayer("playHead", pos);
				$("#jquery_jplayer_" + id).jPlayer("play");
				return false;
			});
			/*Times*/
			setInterval(function() {
				var audio = $("#jquery_jplayer_" + id).data("jPlayer");
				var elapsed = audio.status.currentPercentAbsolute;
				$(".overview-play").css({
					left : elapsed + "%"
				});
				$(".overview-play-bar").css({
					width : elapsed + "%"
				});
				var handmin = ($(".overview-seek").slider('values', 0) / $(".overview-seek").width()) * 100;
				var handmax = ($(".overview-seek").slider('values', 1) / $(".overview-seek").width()) * 100;
				var fovelapsed = (elapsed - handmin) * ($('.scroll-pane').width() / ($(".overview-seek").slider('values', 1) - $(".overview-seek").slider('values', 0)));

				if(elapsed >= handmin && elapsed < handmax) {
					$(".fov-play").css({
						display : "block",
						left : fovelapsed + "%"
					});
				} else {
					$(".fov-play").css({
						display : "none"
					});
				}

				var rem = parseInt(audio.status.duration - audio.status.currentTime, 10), pos = (audio.status.currentTime / audio.status.duration) * 100, mins = Math.floor(rem / 60, 10), secs = rem - mins * 60, totalSeconds = Math.floor(audio.status.currentTime), totalDuration = Math.floor(audio.status.duration), currentMinutes = Math.floor(totalSeconds / 60), currentSeconds = Math.floor(totalSeconds % 60); durationMinutes = Math.floor(totalDuration / 60), durationSeconds = Math.floor(totalDuration % 60);
				$(".overview-current").text(currentMinutes + ':' + (currentSeconds < 10 ? '0' + currentSeconds : currentSeconds));
				$(".overview-duration").text(durationMinutes + ':' + (durationSeconds < 10 ? '0' + durationSeconds : durationSeconds));
			}, 33);
			/*Toggle the FOV if media is playing*/
			$(".wf-toggle").click(function() {
				toggleWaveformdrawer(id, true);
			});
			/*minClicked = false;
			maxClicked = false;

			$('#fov-slidermin').bind('touchstart mousedown', function(event) {
			minClicked = true;
			maxClicked = false;
			mdown = event.timeStamp;
			});
			$('#fov-slidermin').bind('touchend mouseup', function(event) {
			minClicked = false;
			mup = event.timeStamp;
			clickTime = mup - mdown;
			});
			$('#fov-slidermax').bind('touchstart mousedown', function(event) {
			maxClicked = true;
			minClicked = false;
			mdown = event.timeStamp;
			});
			$('#fov-slidermax').bind('touchend mouseup', function(event) {
			maxClicked = false;
			mup = event.timeStamp;
			clickTime = mup - mdown;
			});*/
			//segment select click start
			$('.fov-seek').bind('touchstart mousedown', function(event) {
				mdown = event.timeStamp;
				//Get the click position
				var x = (event.pageX);
				var c = $(".fov-seek").offset().left;
				var wrap = $(".fov-seek").width();
				clickPos = (x - c);

			});
			//segment select click end

			$('.fov-seek').bind('touchend mouseup', function(event) {
				mup = event.timeStamp;
				clickTime = mup - mdown;

				if(clickTime < 250) {
					$("#fov-slidermin").css({
						left : 0 + "px"
					});
					$("#fov-slidermax").css({
						left : 0 + "px"
					});
					$("#segment-highlight").css({
						width : 0 + "px"
					});
					$(".fov-seek").attr({
						select_start : 0,
						select_end : 0
					});
				}
			});
			//Segment select
			var reset = false;
			var start = 0;
			var end = 0;
			//Init start/end of segment selection
			$(".fov-seek").attr({
				select_start : start,
				select_end : end
			});

			$('.fov-seek').slider({
				min : '0',
				max : $('.scroll-pane').width(),
				range : true,
				rangeDrag : false,
				values : [0, 0],

				start : function(e, ui) {
					manualSeek = false;
					var hm = $(".overview-seek").slider('values', 0);
					var le = hm + (clickPos * ($(".scroll-pane").width() / $(".scroll-content").width()));
					$("#fov-slidermin").css({
						left : clickPos + "px"
					});
					$("#fov-slidermax").css({
						left : clickPos + "px"
					});
					$(".fov-seek .ui-slider-range").css({
						width : 0 + "px"
					});
					//Check if the Min handle is clicked
					/*if(minClicked == true && $('#fov-slidermin').css('display') == 'block') {

					 $('#fov-slidermin').css({
					 left : ($(".fov-seek .ui-slider-range").position().left + $(".fov-seek .ui-slider-range").width()) + "px"
					 });
					 $('#fov-slidermax').css({
					 left : $(".fov-seek .ui-slider-range").position().left + "px"
					 });

					 }*/
					$('.fov-time-min').fadeIn('fast', function() {
						calloutMaxVisible = true;
					});
					$('.fov-time-max').fadeIn('fast', function() {
						calloutMinVisible = true;
					});
					$("#segment-highlight").css({
						width : 0 + "px"
					});
				},
				slide : function(e, ui) {
					manualSeek = true;

					var audio = $("#jquery_jplayer_" + id).data("jPlayer");
					dr = audio.status.duration;
					var handmin = $(".overview-seek").slider('values', 0) / $(".overview-seek").width();
					var handmax = $(".overview-seek").slider('values', 1) / $(".overview-seek").width();
					var startTime = dr * handmin;
					var fovmin = $("#fov-slidermin").position().left / $(".fov-seek").width() * dr;
					var fovmax = $("#fov-slidermax").position().left / $(".fov-seek").width() * dr;
					minSeconds = startTime + (fovmin * ($(".scroll-pane").width() / $(".scroll-content").width()));
					maxSeconds = startTime + (fovmax * ($(".scroll-pane").width() / $(".scroll-content").width()));

					$('#fov-slidermin').css({
						display : "block"
					});
					$('#fov-slidermax').css({
						display : "block"
					});
					$(".fov-seek .ui-slider-range").css({
						display : "block"
					});

					//Position the time on the handles
					var readoutWidth = $(".fov-time-min").width();
					var readoutLeft = $("#fov-slidermin").position().left - (readoutWidth / 2) + Math.round($("#fov-slidermin").width() / 2);
					var readoutRight = $("#fov-slidermax").position().left - (readoutWidth / 2) + Math.round($("#fov-slidermax").width() / 2);

					if($("#fov-slidermin").offset().left < $(".fov-seek").offset().left)
						$(".fov-time-min").css({
							left : readoutLeft + "px"
						});
					else
						$(".fov-time-min").css({
							left : readoutLeft + "px"
						});

					if(($('#fov-slidermax').offset().left + ($('.fov-time-max').width() / 2)) >= ($(".fov-seek").offset().left + $(".fov-seek").width()))
						$(".fov-time-max").css({
							left : readoutRight + "px"
						});
					else if(($('#fov-slidermax').offset().left - ($('.fov-time-max').width() / 2)) <= $(".fov-seek").offset().left)
						$(".fov-time-max").css({
							left : readoutRight + "px"
						});
					else
						$(".fov-time-max").css({
							left : readoutRight + "px"
						});

					/*//Check if the Min handle is clicked
					 if(minClicked == true && $('#fov-slidermin').css('display') == 'block') {

					 $('#fov-slidermin').css({
					 left : ($('#fov-slidermax').position().left + $(".fov-seek .ui-slider-range").width()) + "px"
					 });
					 $('#fov-slidermax').css({
					 left : ui.values[1] + "px"
					 });

					 var lefth = ui.values[1];
					 hm = $("#overview-slidermin").position().left;
					 le = hm + (lefth * ($(".scroll-pane").width() / $(".scroll-content").width()));
					 var w = $('#fov-slidermin').position().left - $('#fov-slidermax').position().left;
					 $(".fov-seek .ui-slider-range").css({
					 left : lefth + "px",
					 width : w + "px"
					 });
					 $("#segment-highlight").css({
					 left : le + "px",
					 width : w * ($(".scroll-pane").width() / $(".scroll-content").width()) + "px"
					 });
					 }

					 //Check if the Max handle is clicked
					 else if(maxClicked == true && $('#fov-slidermin').css('display') == 'block') {

					 $('#fov-slidermin').css({
					 left : $(".fov-seek .ui-slider-range").position().left + "px"
					 });
					 $('#fov-slidermax').css({
					 left : ui.values[1] + "px"
					 });
					 var lefth = $(".fov-seek .ui-slider-range").position().left;
					 hm = $("#overview-slidermin").position().left;
					 le = hm + (lefth * ($(".scroll-pane").width() / $(".scroll-content").width()));
					 var w = ui.values[1] - lefth;
					 $(".fov-seek .ui-slider-range").css({
					 width : w + "px"
					 });
					 $("#segment-highlight").css({
					 left : le + "px",
					 width : w * ($(".scroll-pane").width() / $(".scroll-content").width()) + "px"
					 });

					 } else {*/
					ui.values[0] = clickPos;
					endPos = ui.values[1];
					var w = endPos - clickPos;

					if(ui.values[1] == ui.values[0]) {//prevent handles from getting stuck at the left side of the container

						return false;
					}

					checkSegment(minSeconds, maxSeconds, clickPos, ui.values[0], ui.values[1]);

					//}

					$('.fov-time-min').fadeIn('fast', function() {
						calloutMaxVisible = true;
					});
					$('.fov-time-max').fadeIn('fast', function() {
						calloutMinVisible = true;
					});
					currentMinutes = Math.floor(maxSeconds / 60);
					currentSeconds = Math.floor(maxSeconds % 60);
					if(maxSeconds != 0) {
						currentMS = Math.round(((maxSeconds * 1000) % 1000) / 10);
					}
					$('.fov-time-max').text(currentMinutes + ':' + (currentSeconds < 10 ? '0' + currentSeconds : currentSeconds)/* + ':' + (currentMS < 10 ? '0' + currentMS : currentMS)*/); currentMinutes = Math.floor(minSeconds / 60), currentSeconds = Math.floor(minSeconds % 60), currentMS = currentSeconds % 60;
					if(minSeconds != 0) {
						currentMS = Math.round(((minSeconds * 1000) % 1000) / 10);
					}
					$('.fov-time-min').text(currentMinutes + ':' + (currentSeconds < 10 ? '0' + currentSeconds : currentSeconds) /*+ ':' + (currentMS < 10 ? '0' + currentMS : currentMS)*/);

					return false;

				},
				stop : function(e, ui) {
					manualSeek = false;

					/*//Check if the Min handle is clicked
					 if(minClicked == true && $('#fov-slidermin').css('display') == 'block') {

					 $('#fov-slidermin').css({
					 left : ($('#fov-slidermax').position().left + $(".fov-seek .ui-slider-range").width()) + "px"
					 });
					 $('#fov-slidermax').css({
					 left : $('#fov-slidermax').position().left + "px"
					 });

					 var lefth = $('#fov-slidermax').position().left;
					 hm = $("#overview-slidermin").position().left;
					 le = hm + (lefth * ($(".scroll-pane").width() / $(".scroll-content").width()));
					 var w = $('#fov-slidermin').position().left - $('#fov-slidermax').position().left;
					 $(".fov-seek .ui-slider-range").css({
					 left : lefth + "px",
					 width : w + "px"
					 });
					 $("#segment-highlight").css({
					 left : le + "px",
					 width : w * ($(".scroll-pane").width() / $(".scroll-content").width()) + "px"
					 });
					 }

					 //Check if the Max handle is clicked
					 else if(maxClicked == true && $('#fov-slidermin').css('display') == 'block') {

					 /*$('#fov-slidermin').css({left: $(".fov-seek .ui-slider-range").position().left+"px"});
					 $('#fov-slidermax').css({left: ($('#fov-slidermax').position().left+$(".fov-seek .ui-slider-range").width())+"px"});
					 var lefth = $(".fov-seek .ui-slider-range").position().left;
					 hm 	= $("#overview-slidermin").position().left;
					 le = hm+(lefth*($(".scroll-pane").width()/$(".scroll-content").width()));
					 var w = ($('#fov-slidermax').position().left+$(".fov-seek .ui-slider-range").width())-lefth;
					 $(".fov-seek .ui-slider-range").css({width: w+"px"});
					 $("#segment-highlight").css({left: le+"px", width: w*($(".scroll-pane").width()/$(".scroll-content").width())+"px"});

					 } else {*/
					reset = false;
					var seconds = maxSeconds - minSeconds;
					var hm = $(".overview-seek").slider('values', 0);

					//Selecting from left to right
					if(seconds < 6 && seconds >= 0) {// if selection is less than 6 seconds

						var autoWidth = clickPos + (6.3 * ($(".scroll-content").width() / dr));

						if(autoWidth > $(".overview-progress").width()) {
							endPos = $(".overview-progress").width();
							var le = endPos - (6.3 * ($(".scroll-content").width() / dr));
							var w = (endPos - le);
							var segmentHighlightLeftPos = ((6.3 * ($(".overview-progress").width() / dr)) / $(".overview-progress").width()) * 100;

							$(".fov-seek .ui-slider-range").css({
								left : le + "px",
								width : w + "px",
								background : "#1CA2D8"
							});
							$('#fov-slidermax').css({
								left : endPos + "px"
							});
							$('#fov-slidermin').css({
								left : le + "px"
							});

							$("#segment-highlight").css({
								left : (100 - segmentHighlightLeftPos) + "%",
								width : segmentHighlightLeftPos + "%",
								background : "#1CA2D8"
							});
						} else {
							endPos = clickPos + (6.3 * ($(".scroll-content").width() / dr));
							ui.values[1] = endPos;
							var w = endPos - clickPos;
							var le = hm + (clickPos * ($(".scroll-pane").width() / $(".scroll-content").width()));
							$(".fov-seek .ui-slider-range").css('background-color', '#42C6E5');
							$(".fov-seek .ui-slider-range").css('width', w);

							$('#fov-slidermax').css({
								left : endPos + "px"
							});
							$('#fov-slidermin').css({
								left : clickPos + "px"
							});
							$("#segment-highlight").css({
								left : le + "px",
								width : w * ($(".scroll-pane").width() / $(".scroll-content").width()) + "px",
								background : "#1CA2D8"
							});
						}
						$('#fov-slidermin').css('background-color', '#1CA2D8');
						$('#fov-slidermax').css('background-color', '#1CA2D8');

					} else {
						$('#fov-slidermax').css('background-color', '#1CA2D8');
						$(".fov-seek .ui-slider-range").css('background-color', '#1CA2D8');
						$('#fov-slidermin').css('background-color', '#1CA2D8');
					}

					//Selecting from right to left
					if(seconds > -6 && seconds < 0) {//if selection is less than 6 seconds

						var autoWidth = $(".overview-progress").offset().left + clickPos - (6.3 * ($(".scroll-content").width() / dr));

						if(autoWidth < $(".overview-progress").offset().left) {
							endPos = (6.3 * ($(".scroll-content").width() / dr));
							var w = endPos;
							var segmentHighlightLeftPos = ((6.3 * ($(".overview-progress").width() / dr)) / $(".overview-progress").width()) * 100;

							$(".fov-seek .ui-slider-range").css({
								left : 0 + "px",
								width : w + "px",
								background : "#1CA2D8"
							});
							$('#fov-slidermax').css({
								left : endPos + "px"
							});
							$('#fov-slidermin').css({
								left : 0 + "px"
							});

							$("#segment-highlight").css({
								left : 0 + "%",
								width : segmentHighlightLeftPos + "%",
								background : "#1CA2D8"
							});
						} else {

							var hmax = $("#fov-slidermax").position().left;
							var hmin = $("#fov-slidermin").position().left;
							endPos = hmin - (6.3 * ($(".scroll-content").width() / dr));
							var w = hmin - endPos;
							$('#fov-slidermin').css('background-color', '#1CA2D8');
							$('#fov-slidermax').css('background-color', '#1CA2D8');
							var hm = $(".overview-seek").slider('values', 0);
							var le = hm + (endPos * ($(".scroll-pane").width() / $(".scroll-content").width()));
							$("#fov-slidermax").css({
								left : endPos + "px"
							});
							$(".fov-seek .ui-slider-range").css({
								width : w + "px",
								left : endPos + "px",
								background : "#1CA2D8"
							});

							$("#segment-highlight").css({
								left : le + "px",
								width : w * ($(".scroll-pane").width() / $(".scroll-content").width()) + "px",
								background : "#1CA2D8"
							});

						}

					} else if(seconds < -6) {
						var ol = $("#fov-slidermax").position().left;
						var w = clickPos - ol;
						$('#fov-slidermin').css('background-color', '#1CA2D8');
						$('#fov-slidermax').css('background-color', '#1CA2D8');
						var hm = $(".overview-seek").slider('values', 0);
						var le = Math.round(hm) + (ol * ($(".scroll-pane").width() / $(".scroll-content").width()));
						$(".fov-seek .ui-slider-range").css({
							width : w + "px",
							left : ol + "px",
							background : "#1CA2D8"
						});
						$("#segment-highlight").css({
							left : le + "px",
							width : w * ($(".scroll-pane").width() / $(".scroll-content").width()) + "px",
							background : "#1CA2D8"
						});
					}
					//}

					if($("#segment-highlight").offset().left + $("#segment-highlight").width() > $(".overview-progress").offset().left + $(".overview-progress").width()) {

						var left = $(".overview-progress").offset().left + $(".overview-progress").width() - w;

						$("#segment-highlight").css({
							left : left + "px",
							width : w * ($(".scroll-pane").width() / $(".scroll-content").width()) + "px",
							background : "#1CA2D8"
						});
					} currentMinutes = Math.floor(maxSeconds / 60), currentSeconds = Math.floor(maxSeconds % 60);
					if(calloutMaxVisible == false) {
						$('.fov-time-max').fadeIn('fast', function() {
							calloutMaxVisible = true;
						});
						$('.fov-time-max').text(currentMinutes + ':' + (currentSeconds < 10 ? '0' + currentSeconds : currentSeconds));
					}
					$('.fov-time-max').fadeOut('fast', function() {
						calloutMaxVisible = false;
					}); currentMinutes = Math.floor(minSeconds / 60), currentSeconds = Math.floor(minSeconds % 60);
					if(calloutMinVisible == false) {
						$('.fov-time-min').fadeIn('fast', function() {
							calloutMinVisible = true;
						});
						$('.fov-time-min').text(currentMinutes + ':' + (currentSeconds < 10 ? '0' + currentSeconds : currentSeconds));
					}
					$('.fov-time-min').fadeOut('fast', function() {
						calloutMinVisible = false;
					});
					updateSegmentdataForExternalUse(id);
				},
				change : function(e, ui) {

					if(clickTime < 250 && clickTime > 0) {

						$('#fov-slidermin').css({
							display : "none"
						});
						$('#fov-slidermax').css({
							display : "none"
						});
						$(".fov-seek .ui-slider-range").css({
							width : 0 + "px"
						});
						$("#segment-highlight").css({
							width : 0 + "%"
						});
						$(".fov-seek").attr({
							select_start : start,
							select_end : end
						});
						reset = true;
					}

				}
			});

			//Overview slider
			scrollbar = $(".overview-seek").slider;
			$(".overview-seek").slider({
				min : '0',
				max : $(".overview-seek").width(),
				range : true,
				rangeDrag : true,
				values : [0, $(".overview-seek").width()],
				start : function(e, ui) {
					manualSeek = true;
				},
				slide : function(e, ui) {
					manualSeek = true;
					var smol = $("#segment-highlight").offset().left;
					var smw = $("#segment-highlight").width();

					//Stop the FOV slider from sliding out the container
					var cval0 = ui.values[0];
					var cval1 = ui.values[1];
					//Left
					if(ui.values[0] <= 0) {
						cval0 = 1;
						$(".overview-seek").slider('values', 1, ui.values[0] + fs);
						$(".overview-seek").slider('values', 0, 1);
						return false;
					}
					//Right
					if(cval0 + fs > $(".overview-seek").width()) {
						cval0 += fs;
						$(".overview-seek").slider('values', 1, $(".overview-seek").width());
						$(".overview-seek").slider('values', 0, ui.values[1] - fs);
						return false;
					} else {
						if($(".scroll-content").width() > $(".scroll-pane").width()) {
							$(".scroll-content").css('margin-left', -ui.values[0] * ($(".scroll-content").width() / $(".scroll-pane").width()) + 'px');
						} else {
							$(".scroll-content").css('margin-left', 0);
						}
					}

					$(".overview-seek").slider('values', 1, ui.values[0] + fs);
					$(".overview-seek").slider('values', 0, ui.values[1] - fs);
					//Show the selected segment on the waveform if its in the FOV
					showSegmentSelector(reset, id);
					$(".viewport").css({
						left : ui.values[0] + "px"
					});

				},
				stop : function(e, ui) {
					manualSeek = false;

				},
				change : function(e, ui) {

					var lpush = $("#overview-slidermin").position().left * ($(".scroll-content").width() / $(".scroll-pane").width());
					$(".scroll-content").css('margin-left', -lpush + 'px');
					showSegmentSelector(reset, id);
				}
			});

			/*Zoom controls*/
			//Zoom in
			$(".zoom-plus").click(function(e, ui) {
				// check if next zoom in step would result in less data then needed for the waveform drawer width
				if(dataValues / 2 < $(".overview-seek").width()) {
					fs = fs;
				} else {
					// alright, we have enough values
					var audioDur = $("#jquery_jplayer_" + id).data("jPlayer").status.duration;
					var zoomlvl = fs / (wave_resolution * audioDur);
					dataValues = Math.round(dataValues / 2);
					fs = (fs) / 2;
					var slider = $(".overview-seek");
					var min = slider.slider("values", 0);
					var max = slider.slider("values", 1);
					var zl = Math.round(fs) / 2;

					$('.scroll-content').css({
						width : $('.scroll-content').width() * 2
					});

					$("#overview-slidermin").css({
						left : Math.round(min + zl) + "px"
					});
					$("#overview-slidermax").css({
						left : Math.round(max - zl) + "px"
					});
					slider.slider('values', [min + zl, max - zl]);
					showSegmentSelector(reset, id);
					wscroll(fs, scrollbar);
					var vwidth = $(".overview-seek .ui-slider-range").width();
					var vleft = $("#overview-slidermin").position().left;
					$(".viewport").css({
						width : vwidth + "px",
						left : vleft + "px"
					});
					var pushHandleLeft = (vwidth / 2) - 28;
					$(".overview-seek .ui-slider-range").css({
						'margin-left' : pushHandleLeft + "px"
					});
				}
			});
			//Zoom out
			$(".zoom-minus").click(function(e, ui) {
				var slider = $(".overview-seek");

				if(fs * 2 > osw) {
					fs = slider.width();
					slider.slider('values', [0, fs]);
					$("#overview-slidermin").css({
						left : 0 + "px"
					});
					$("#overview-slidermax").css({
						left : fs + "px"
					});
				} else {
					fs = (fs * 2);
					dataValues = Math.round(dataValues * 2);
					var ovs = slider.width();
					zl = Math.round(fs) / 4;
					$('.scroll-content').css({
						width : $('.scroll-content').width() / 2
					});

					var min = $("#overview-slidermin").position().left;
					var max = $("#overview-slidermax").position().left;

					//Dont let the slider go out right
					var newWidth = min - zl + fs;
					if(newWidth > ovs) {

						$("#overview-slidermin").css({
							left : Math.round(ovs - fs) + "px"
						});
						$("#overview-slidermax").css({
							left : Math.round(ovs) + "px"
						});
						slider.slider('values', [ovs - fs, ovs]);
					}
					//Dont let the slider go out left
					else if((min - zl) <= 0) {

						$("#overview-slidermin").css({
							left : 1 + "px"
						});
						$("#overview-slidermax").css({
							left : Math.round(1 + fs) + "px"
						});
						slider.slider('values', [1, 1 + fs]);
					} else {

						$("#overview-slidermin").css({
							left : Math.round(min - zl) + "px"
						});
						$("#overview-slidermax").css({
							left : Math.round(max + zl) + "px"
						});
						slider.slider('values', [min - zl, max + zl]);
					}
					showSegmentSelector(reset, id);
					wscroll(fs, scrollbar);
					var vwidth = $(".overview-seek .ui-slider-range").width();
					var vleft = $("#overview-slidermin").position().left;
					$(".viewport").css({
						width : vwidth + "px",
						left : vleft + "px"
					});
					var pushHandleLeft = (vwidth / 2) - 28;
					$(".overview-seek .ui-slider-range").css({
						'margin-left' : pushHandleLeft + "px"
					});
				}
			});
			//Move to playhead
			$(".go-to-play").click(function(e, ui) {
				fs = fs;
				var currentpos = ($("#jquery_jplayer_" + id).data("jPlayer").status.currentPercentAbsolute / 100) * $('.overview-seek').width();
				if(currentpos + fs >= $(".overview-seek").width()) {
					$(".overview-seek").slider('values', 0, $(".overview-seek").width() - fs);
					$(".overview-seek").slider('values', 1, $(".overview-seek").width());
				} else {
					$(".overview-seek").slider('values', 0, currentpos);
					$(".overview-seek").slider('values', 1, currentpos + fs);
				}
				var vleft = $("#overview-slidermin").position().left;
				var vwidth = $(".overview-seek .ui-slider-range").width();
				$(".viewport").css({
					width : vwidth + "px",
					left : vleft + "px"
				});
				var pushHandleLeft = (vwidth / 2) - 28;
				$(".overview-seek .ui-slider-range").css({
					'margin-left' : pushHandleLeft + "px"
				});
			});
			//End of uimodel 0
			break;
		case 1:
			//Start of uimodel 1

			//draw the waveform
			/*var wave_factor = $("#jquery_jplayer_" + id).jPlayer("option", "waveform_factor");
			draw(0, wave_factor, id);*/
			//Set up new layout
			$('.fov-container').show().css({
				'margin-top' : -40 + 'px'
			});
			$('.overview-container').addClass('expandedoverview');
			$('.zoom-minus,.zoom-plus,.go-to-play,.overview-progress,.wf-toggle').hide();
			$('.placeholder').css({
				height : 0 + 'px'
			});
			$('.fov-current').css({
				display : "block"
			});
			$('.overview-duration').css({
				margin : '5px 3px 0 0'
			});
			$('.fov-seek').css({position: "absolute"});
			//$('#fov-slidermin,#fov-slidermax').css({display: "none"});

			fs = $('.fov-seek').width();
			//Waveform viewport width
			osw = $(".overview-seek").width();
			//Width of the overview progressbar
			var clickPos;
			var mdown;
			var mup;
			var currentMS = 0;
			var clicked = false;
			//Current hundreds
			$('.fov-time-min').hide();
			var calloutMinVisible = false;
			$('.fov-time-max').hide();
			var calloutMaxVisible = false;
			var wfdata = [];
			var list = $("#jquery_jplayer_" + id).jPlayer("option", "playlist");
			var wave_factor = $("#jquery_jplayer_" + id).jPlayer("option", "waveform_factor");
			var wave_resolution = $("#jquery_jplayer_" + id).jPlayer("option", "waveform_resolution");

			$.ajax({
				async : false, // Wait for waveform to load
				url : list[0].waveformfile,
				dataType : "text",
				type : "GET",
				crossDomain : true,
				success : function(data) {
					wfdata = data.split(',');

				},
				error : function(xhr, textStatus, errorThrown) {

				}
			});
			dataValues = wfdata.length;
			//Count the number of values


			//segment select click start
			$('.fov-seek').on('touchstart mousedown', function(event) {
				//Get the click position
				mdown = event.pageX;
				mdown = (typeof(mdown) == 'undefined')? event.originalEvent.touches[0].pageX : mdown;
				
				$('#fov-slidermin,#fov-slidermax,.fov-time-max,.fov-time-min').css({
					display : "none"
				});
				var c = $(".fov-seek").offset().left;
				var wrap = $(".fov-seek").width();
				clickPos = (mdown - c);
				clicked = false;

			return false;
			});

			//segment select click end
			$(document).on('touchend mouseup', function(event) {
				clicked = false;
				mup = event.pageX;
				mup = (typeof(mup) == 'undefined')? event.originalEvent.changedTouches[0].pageX : mup;
				
				if(mup == mdown) {
					//Start playing from the click position

					var c = $(".fov-progress").offset().left;
					var wrap = $(".fov-progress").width();
					var pos = (((mup - c) / wrap) * 100);
			
					$('#fov-slidermin,#fov-slidermax,.fov-time-max,.fov-time-min').css({
						display : "none"
					});
					$("#jquery_jplayer_" + id).jPlayer("playHead", pos);
					$("#jquery_jplayer_" + id).jPlayer("play");	
					/*setTimeout(function() {
											
						$(".fov-play,.fov-current").css({
						left : pos + "%"
						});
					}, 300);*/
					return false;

				}

			});
	
			
	$('.fov-seek').slider({
			min : '0',
			max : $('.scroll-pane').width(),
			range : true,
			rangeDrag : false,
			values : [0, 0],

			start : function(e, ui) {
				manualSeek = false;
				
			},
			slide : function(e, ui) {
				manualSeek = true;
				
				var offset = $(".fov-progress").offset().left;
				
				if((ui.values[1] + offset) - mdown < 2 && (ui.values[1] + offset) - mdown > -2) {
					$('.fov-time-max,.fov-time-min').css({
						display : "none"
					});
					return false;
				} 	 
					$('#fov-slidermin').css({
						display : "block",
						left : clickPos + "px"
					});
					$('#fov-slidermax').css({
						display : "block",
						left : ui.values[1] + "px"
					});
					$(".fov-seek .ui-slider-range").css({
						display : "block"
					});

					var audio = $("#jquery_jplayer_" + id).data("jPlayer");
					dr = audio.status.duration;
					var startTime = 0;
					var fovmin = $("#fov-slidermin").position().left / $(".fov-seek").width() * dr;
					var fovmax = $("#fov-slidermax").position().left / $(".fov-seek").width() * dr;
					minSeconds = startTime + (fovmin * ($(".scroll-pane").width() / $(".scroll-content").width()));
					maxSeconds = startTime + (fovmax * ($(".scroll-pane").width() / $(".scroll-content").width()));
				
				//Fix iPad showing the selected segment in red if play is not clicked before clicking the waveform
				if(dr == 0){
					
						$(".fov-seek .ui-slider-range").css({							
								background : "#1CA2D8"
							});
				}else{
					//Position the time on the handles
					var readoutWidth = $(".fov-time-min").width();
					var readoutLeft = $("#fov-slidermin").position().left - (readoutWidth / 2) + Math.round($("#fov-slidermin").width() / 2);
					var readoutRight = $("#fov-slidermax").position().left - (readoutWidth / 2) + Math.round($("#fov-slidermax").width() / 2);

					if($("#fov-slidermin").offset().left < $(".fov-seek").offset().left)
						$(".fov-time-min").css({
							left : readoutLeft + "px"
						});
					else
						$(".fov-time-min").css({
							left : readoutLeft + "px"
						});

					if(($('#fov-slidermax').offset().left + ($('.fov-time-max').width() / 2)) >= ($(".fov-seek").offset().left + $(".fov-seek").width()))
						$(".fov-time-max").css({
							left : readoutRight + "px"
						});
					else if(($('#fov-slidermax').offset().left - ($('.fov-time-max').width() / 2)) <= $(".fov-seek").offset().left)
						$(".fov-time-max").css({
							left : readoutRight + "px"
						});
					else
						$(".fov-time-max").css({
							left : readoutRight + "px"
						});
					var seconds = maxSeconds-minSeconds;
					if(seconds < 6 && seconds >= 0) {//If selection is less than 6 seconds
							endPos = clickPos + (6 / $(".scroll-content").width() * dr);
							endPos = endPos / $(".fov-seek").width() * dr;
							var w = ui.values[1] - clickPos;
							
							$(".fov-seek .ui-slider-range").css('background-color', '#F15A24');
							$('#fov-slidermin').css({
								background : "#F15A24"
							});
							$('#fov-slidermax').css({
								background : "#F15A24"
							});
							$('#fov-slidermin').css({
								left : clickPos + "px"
							});
							$('#fov-slidermax').css({
								left : ui.values[1] + "px"
							});
							$(".fov-time-min").css({
								color : "#F15A24"
							});
							$(".fov-time-max").css({
								color : "#F15A24"
							});
							
							$(".fov-seek .ui-slider-range").css({
								width : w + "px",
								left : clickPos + "px"
							});
							
						} else if(seconds > 6) {
							var w = ui.values[1] - clickPos;
							$('.fov-seek #fov-slidermax').css({
								background : "#1CA2D8"
							});
							$(".fov-seek .ui-slider-range").css('background-color', '#1CA2D8');
							$('.fov-seek #fov-slidermin').css({
								background : "#1CA2D8"
							});
							$('#fov-slidermin').css({
								left : clickPos + "px"
							});
							$('#fov-slidermax').css({
								left : ui.values[1] + "px"
							});
							$(".fov-time-min").css({
								color : "#1CA2D8"
							});
							$(".fov-time-max").css({
								color : "#1CA2D8"
							});
							
							$(".fov-seek .ui-slider-range").css({
								width : w + "px",
								left : clickPos + "px"
							});
							
						}

						if(seconds > -6 && seconds < 0) {//If selection is less than 6 seconds
							endPos = clickPos;
							var w = endPos - ui.values[1];
							
							$(".fov-seek .ui-slider-range").css('background-color', '#F15A24');
							$('#fov-slidermin').css('background-color', '#F15A24');
							$('#fov-slidermax').css('background-color', '#F15A24');
							$('#fov-slidermin').css({
								left : endPos + "px"
							});
							$('#fov-slidermax').css({
								left : ui.values[1] + "px"
							});
							$(".fov-seek .ui-slider-range").css({
								width : w + "px",
								left : ui.values[1] + "px"
							});
							$(".fov-time-min").css({
								color : "#F15A24"
							});
							$(".fov-time-max").css({
								color : "#F15A24"
							});
							
						} else if(seconds < -6) {
							endPos = clickPos
							var w = endPos - ui.values[1];

							$('#fov-slidermin').css({
								left : endPos + "px"
							});
							$('#fov-slidermax').css({
								left : ui.values[1] + "px"
							});
							$(".fov-time-min").css({
								color : "#1CA2D8"
							});
							$(".fov-time-max").css({
								color : "#1CA2D8"
							});
							$(".fov-seek .ui-slider-range").css('background-color', '#1CA2D8');
							$('.fov-seek #fov-slidermin').css('background-color', '#1CA2D8');
							$('.fov-seek #fov-slidermax').css('background-color', '#1CA2D8');
							
							$(".fov-seek .ui-slider-range").css({
								width : w + "px",
								left : ui.values[1] + "px"
							});				
						}
					}
					$('.fov-time-min').fadeIn('fast', function() {
						calloutMaxVisible = true;
					});
					$('.fov-time-max').fadeIn('fast', function() {
						calloutMinVisible = true;
					});
					maxSeconds = (maxSeconds > dr )? dr : maxSeconds;
					currentMinutes = Math.floor(maxSeconds / 60);
					currentSeconds = Math.floor(maxSeconds % 60);
					if(maxSeconds != 0) {
						currentMS = Math.round(((maxSeconds * 1000) % 1000) / 10);
					}
					$('.fov-time-max').text(currentMinutes + ':' + (currentSeconds < 10 ? '0' + currentSeconds : currentSeconds)/* + ':' + (currentMS < 10 ? '0' + currentMS : currentMS)*/);
					minSeconds = (minSeconds < 0)? 0 : minSeconds;
					currentMinutes = Math.floor(minSeconds / 60); 
					currentSeconds = Math.floor(minSeconds % 60); 
					if(minSeconds != 0) {
						currentMS = Math.round(((minSeconds * 1000) % 1000) / 10);
					}
					$('.fov-time-min').text(currentMinutes + ':' + (currentSeconds < 10 ? '0' + currentSeconds : currentSeconds) /*+ ':' + (currentMS < 10 ? '0' + currentMS : currentMS)*/);

					return false;
				
			},
			stop : function(e, ui) {
				manualSeek = false;
					var audio = $("#jquery_jplayer_" + id).data("jPlayer");
					dr = audio.status.duration;
					var startTime = 0;
					var fovmin = $("#fov-slidermin").position().left / $(".fov-seek").width() * dr;
					var fovmax = $("#fov-slidermax").position().left / $(".fov-seek").width() * dr;
					minSeconds = startTime + (fovmin * ($(".scroll-pane").width() / $(".scroll-content").width()));
					maxSeconds = startTime + (fovmax * ($(".scroll-pane").width() / $(".scroll-content").width()));
				
					reset = false;
					var seconds = maxSeconds - minSeconds;
					
				if($("#fov-slidermin").position().left > 0 || $("#fov-slidermax").position().left > 0){
					//Selecting from left to right
					if(seconds < 6 && seconds >= 0) {// if selection is less than 6 seconds

						var autoWidth = clickPos + (6.3 * ($(".scroll-content").width() / dr));

						if(autoWidth > $(".fov-progress").width()) {
							endPos = $(".fov-progress").width();
							var le = endPos - (6.3 * ($(".scroll-content").width() / dr));
							var w = (endPos - le);

							$(".fov-seek .ui-slider-range").css({
								left : le + "px",
								width : w + "px",
								background : "#1CA2D8"
							});
							$('#fov-slidermax').css({
								left : endPos + "px"
							});
							$('#fov-slidermin').css({
								left : le + "px"
							});

						} else {
							endPos = clickPos + (6.3 * ($(".scroll-content").width() / dr));
							ui.values[1] = endPos;
							var w = endPos - clickPos;
							var le = hm + (clickPos * ($(".scroll-pane").width() / $(".scroll-content").width()));
							$(".fov-seek .ui-slider-range").css('background-color', '#42C6E5');
							$(".fov-seek .ui-slider-range").css('width', w);

							$('#fov-slidermax').css({
								left : endPos + "px"
							});
							$('#fov-slidermin').css({
								left : clickPos + "px"
							});
							$("#segment-highlight").css({
								left : le + "px",
								width : w * ($(".scroll-pane").width() / $(".scroll-content").width()) + "px",
								background : "#1CA2D8"
							});
						}
						$('#fov-slidermin').css('background-color', '#1CA2D8');
						$('#fov-slidermax').css('background-color', '#1CA2D8');

					} else {
						$('#fov-slidermax').css('background-color', '#1CA2D8');
						$(".fov-seek .ui-slider-range").css('background-color', '#1CA2D8');
						$('#fov-slidermin').css('background-color', '#1CA2D8');
					}

					//Selecting from right to left
					if(seconds > -6 && seconds < 0) {//if selection is less than 6 seconds

						var autoWidth = $(".overview-progress").offset().left + clickPos - (6.3 * ($(".scroll-content").width() / dr));

						if(autoWidth < $(".overview-progress").offset().left) {
							endPos = (6.3 * ($(".scroll-content").width() / dr));
							var w = endPos;
							var segmentHighlightLeftPos = ((6.3 * ($(".overview-progress").width() / dr)) / $(".overview-progress").width()) * 100;

							$(".fov-seek .ui-slider-range").css({
								left : 0 + "px",
								width : w + "px",
								background : "#1CA2D8"
							});
							$('#fov-slidermax').css({
								left : endPos + "px"
							});
							$('#fov-slidermin').css({
								left : 0 + "px"
							});

						} else {

							var hmax = $("#fov-slidermax").position().left;
							var hmin = $("#fov-slidermin").position().left;
							endPos = hmin - (6.3 * ($(".scroll-content").width() / dr));
							var w = hmin - endPos;
							$('#fov-slidermin').css('background-color', '#1CA2D8');
							$('#fov-slidermax').css('background-color', '#1CA2D8');
							var hm = $(".overview-seek").slider('values', 0);
							var le = hm + (endPos * ($(".scroll-pane").width() / $(".scroll-content").width()));
							$("#fov-slidermax").css({
								left : endPos + "px"
							});
							$(".fov-seek .ui-slider-range").css({
								width : w + "px",
								left : endPos + "px",
								background : "#1CA2D8"
							});

						}

					} else if(seconds < -6) {
						var ol = $("#fov-slidermax").position().left;
						var w = clickPos - ol;
						$('#fov-slidermin').css('background-color', '#1CA2D8');
						$('#fov-slidermax').css('background-color', '#1CA2D8');
						var hm = $(".overview-seek").slider('values', 0);
						var le = Math.round(hm) + (ol * ($(".scroll-pane").width() / $(".scroll-content").width()));
						$(".fov-seek .ui-slider-range").css({
							width : w + "px",
							left : ol + "px",
							background : "#1CA2D8"
						});
						
					}
					
					currentMinutes = Math.floor(maxSeconds / 60), currentSeconds = Math.floor(maxSeconds % 60);
					if(calloutMaxVisible == false) {
						$('.fov-time-max').fadeIn('fast', function() {
							calloutMaxVisible = true;
						});
						$('.fov-time-max').text(currentMinutes + ':' + (currentSeconds < 10 ? '0' + currentSeconds : currentSeconds));
					}
					$('.fov-time-max').fadeOut('fast', function() {
						calloutMaxVisible = false;
					}); currentMinutes = Math.floor(minSeconds / 60), currentSeconds = Math.floor(minSeconds % 60);
					if(calloutMinVisible == false) {
						$('.fov-time-min').fadeIn('fast', function() {
							calloutMinVisible = true;
						});
						$('.fov-time-min').text(currentMinutes + ':' + (currentSeconds < 10 ? '0' + currentSeconds : currentSeconds));
					}
					$('.fov-time-min').fadeOut('fast', function() {
						calloutMinVisible = false;
					});			
					updateSegmentdataForExternalUse(id);
				 }			
						
			},
			change : function(e, ui) {

			}
		});
					
			/*Times*/
			setInterval(function() {
				var audio = $("#jquery_jplayer_" + id).data("jPlayer");
				var elapsed = audio.status.currentPercentAbsolute;

				$(".fov-play").css({
					display : "block",
					left : elapsed + "%"
				});
				$(".fov-current").css({
					left : elapsed + "%"
				});

				var rem = parseInt(audio.status.duration - audio.status.currentTime, 10), pos = (audio.status.currentTime / audio.status.duration) * 100, mins = Math.floor(rem / 60, 10), secs = rem - mins * 60, totalSeconds = Math.floor(audio.status.currentTime), totalDuration = Math.floor(audio.status.duration), currentMinutes = Math.floor(totalSeconds / 60), currentSeconds = Math.floor(totalSeconds % 60); durationMinutes = Math.floor(totalDuration / 60), durationSeconds = Math.floor(totalDuration % 60);
				$(".fov-current").text(currentMinutes + ':' + (currentSeconds < 10 ? '0' + currentSeconds : currentSeconds));
				$(".overview-duration").text(durationMinutes + ':' + (durationSeconds < 10 ? '0' + durationSeconds : durationSeconds));
			}, 10);
			//End of uimodel 1
			break;
	}

}

/**Initalize the Result list
 * @param id	The id of the Results player. $("#jquery_jplayer_"+id) int
 */
function initResults(id) {
	clicked = 0;
	//id of the clicked track in the playlist array
	next = 0;
	//id of the next track in the playlist array
	current = 0;
	//id of the current track in the playlist array
	var clickPos;
	//Position of the click on the progress bar
	var wfdata = [];
	//Last track clicked
	var last = 0;
	//Waveform data values
	var list = $("#jquery_jplayer_" + id).jPlayer("option", "playlist");
	var wave_resolution = $("#jquery_jplayer_" + id).jPlayer("option", "waveform_resolution");
	var listlength = 0;
	
	var isiPad = navigator.userAgent.match(/iPad/i) != null;

	/*List the tracks*/
	$.each(list, function(_key, _array) {
		var wfurl = list[_key].waveformfile;
		//Waveform URL
		var segment = list[_key].segments;
		listlength++;

	
		//if the duration is provided
		if(list[_key].duration != 0 && list[_key].duration !== undefined) {
			var tr = list[_key].duration;
			var trackDuration =  (tr+(tr*0.0235)) / 1000;
		}
		// else load the waveform
		else {
			//Get the duration of the track
			//If its IE
			if($.browser.msie && window.XDomainRequest) {
				var xdr = new XDomainRequest();
				xdr.open("get", list[_key].waveformfile);
				xdr.send();
				xdr.onload = function() {
					wfdata = xdr.responseText.split(',');
				};
			} else {
				$.ajax({
					async : false, // Wait for waveform to load
					url : list[_key].waveformfile,
					dataType : "text",
					type : "GET",
					success : function(data) {
						wfdata = data.split(',');
					},
					error : function(xhr, textStatus, errorThrown) {
					}
				});
			}
			var trackDuration = wfdata.length / wave_resolution;
		} durationMinutes = Math.floor(trackDuration / 60), durationSeconds = Math.floor(trackDuration % 60);

		// get search similar link
		var searchsimilarfunc = list[_key].searchsimilarfunc;
		// get backlink
		var backlink_atag = "<a class='stayTuned' href='" + list[_key].backlinkurl + "' target='_blank'></a>";

		$('#listwrap').append("<div class='item'><ul id='nav' class='dropMenu'><li><p> </p> <ul id='morelist'> <div id='searchSim'><a class='searchSim' href='javascript:" + searchsimilarfunc + "'></a></div> <div id='stayTuned'>" + backlink_atag + "</div>  </ul> </li></ul><div class='title_container'><a   class='song song" + _key + "'  href=" + list[_key].audiofile_mp3 + " data-ogg=" + list[_key].audiofile_ogg + ">" + list[_key].text + "</a></div><div class='jp-progress-list jp-progress'><div class='jp-seek-bar" + _key + " seek-bar'><div class='jp-play-bar" + _key + " play-bar'></div><div class='playhead_" + _key + " playhead'></div></div></div><div class='jp-current-time current-time" + _key + "'></div><div id='drt" + _key + "' class='jp-duration duration" + _key + "'>" + durationMinutes + ':' + (durationSeconds < 10 ? '0' + durationSeconds : durationSeconds) + "</div></div>");

		//Found Segments
		$.each(segment, function(skey, val) {
			var startp = ((segment[skey].start)  / (trackDuration*1000)) * 100;
			//in percent
			var endp = ((segment[skey].end ) / (trackDuration*1000)) * 100;
			var wid = endp - startp;
			$(".jp-seek-bar" + _key).append("<div class='found-segment_" + _key + "_" + skey + " found-segment' start='"+(segment[skey].start/1000)+"'></div>");
			$(".found-segment_" + _key + "_" + skey).css({
				"margin-left" : startp + "%",
				width : wid + "%"
			});
		});
	});
	/*Menu animation*/
	$('.container').click(function() {
		$(this).find('#morelist').hide();
	});
	$('.dropMenu li').click(function() {
		$('.open #morelist').hide();
		$('.open').removeClass('open');
		$(this).show();
	});

	$('.dropMenu').click(function(event) {
		event.stopPropagation();
	});
	// Number of results
	$('#jp_container_' + id + ' .jp-interface').append("<div class='numresults'>Results: " + listlength + "</div>");

	$.each(list, function(_key, _array) {
		/*switch tracks*/
		$(".song" + _key).click(function(e) {
			clicked = Math.round(_key);
			next = Math.round(_key);
			current = Math.round(_key);
			last = Math.round(_key);
			e.preventDefault();

			//Highlight currently playing
			$(".song").each(function() {
				$(this).parent().parent().addClass("item");
				$(this).parent().parent().removeClass("playing");
			});
			$(this).parent().parent().removeClass("item");
			$(this).parent().parent().addClass("playing");

			// Load new Media
			$("#jquery_jplayer_" + id).jPlayer("setMedia", {
				mp3 : $(this).attr("href"),
				oga : $(this).attr("data-ogg")
			});
			$("#jquery_jplayer_" + id).jPlayer("load");
			$("#jquery_jplayer_" + id).jPlayer("option", "cssSelector", {
				seekBar : "#jquery_jplayer_" + id + " .jp-seek-bar" + _key
			});
			$("#jquery_jplayer_" + id).jPlayer("option", "cssSelector", {
				playBar : "#jquery_jplayer_" + id + " .jp-play-bar" + _key
			});
			
		if($('.jp-seek-bar' + current).children(".found-segment").size() > 0) {
		
			var newPos = $(".found-segment_"+current+"_0").attr('start');
			newPos = parseInt(newPos);
			
			//Check if the platform is the iPad, Add a timeout so it moves the playhead correctly
			if(isiPad ){					
				var x = 0;
				
						$("#jquery_jplayer_" + id).bind($.jPlayer.event.loadeddata, function(event) {				
						timerId = setInterval(function () {
							var audio = $("#jquery_jplayer_" + id).data("jPlayer");
							var playhead = audio.status.currentPercentAbsolute;		
							
							setTimeout(function(){
							$("#jquery_jplayer_" + id).jPlayer("play",newPos);
							},2500);
							
							x++;
							if(x > 1 || playhead >= 1){ clearInterval(timerId);
								$("#jquery_jplayer_" + id).unbind($.jPlayer.event.loadeddata);
							 };
						}, 50);
						});
					
			}
			else $("#jquery_jplayer_" + id).jPlayer("play",newPos);
					
		}
		else{
			 $("#jquery_jplayer_" + id).jPlayer("play");		
		}	
		});
		
		/*Start playing from the playlist seekbar click position*/
		$(".jp-seek-bar" + _key).click(function(e) {
			//e.preventDefault();
			clicked = Math.round(_key);
			next = Math.round(_key);
			current = Math.round(_key);
			
			if(list[_key].duration != 0 && list[_key].duration !== undefined) {
			var tr = list[_key].duration;
			var trackDuration =  (tr+(tr*0.0235)) / 1000;
			}
			var click = (e.pageX);
			var c = $(".jp-seek-bar" + _key).offset().left;
			var wrap = $(".jp-seek-bar" + _key).width();
			pos = (((click - c) / wrap) * trackDuration);
						
			//Highlight currently playing
			$(".song").each(function() {
				$(this).parent().parent().addClass("item");
				$(this).parent().parent().removeClass("playing");
			});
			$(this).parent().parent().removeClass("item");
			$(this).parent().parent().addClass("playing");
			
			//Check if the clicked song is not the current song
			if(last != clicked){				
			$("#jquery_jplayer_" + id).jPlayer("setMedia", {
				mp3 : $(".song" + _key).attr("href"),
				oga : $(".song" + _key).attr("data-ogg")
			});

			} 
			$("#jquery_jplayer_" + id).jPlayer("option", "cssSelector", {
					seekBar : "#jquery_jplayer_" + id + " .jp-seek-bar" + _key
			});
			$("#jquery_jplayer_" + id).jPlayer("option", "cssSelector", {
					playBar : "#jquery_jplayer_" + id + " .jp-play-bar" + _key
			});
				
			 last = clicked;
					//Check if the platform is the iPad, retry untill the playhead is moved	
					if(isiPad ){
										
						$("#jquery_jplayer_" + id).bind($.jPlayer.event.timeupdate, function(event) {				
							$("#jquery_jplayer_" + id).jPlayer("play",pos);
							var audio = $("#jquery_jplayer_" + id).data("jPlayer");
							var playhead = audio.status.currentPercentAbsolute;							
								if(playhead >= 1){ 				
								$("#jquery_jplayer_" + id).unbind($.jPlayer.event.timeupdate);
							 }					
						});
						
					}
					else $("#jquery_jplayer_" + id).jPlayer("play",pos);		
		});
	});
	/*Song is finished jump to the next or if the last track played jump to the first*/
	$("#jquery_jplayer_" + id).bind($.jPlayer.event.ended, function(event) {
		next = parseInt(next) + 1; (next == listlength) ? next = 0 : next = next;
		current = next;

		//Highlight currently playing
		$(".song").each(function() {
			$(this).parent().parent().addClass("item");
			$(this).parent().parent().removeClass("playing");
		});
		$(".song" + next).parent().parent().removeClass("item");
		$(".song" + next).parent().parent().addClass("playing");

		$("#jquery_jplayer_" + id).jPlayer("setMedia", {
			mp3 : $(".song" + next).attr("href"),
			oga : $(".song" + next).attr("data-ogg")
		});
		
		$("#jquery_jplayer_" + id).jPlayer("load");

		$("#jquery_jplayer_" + id).jPlayer("option", "cssSelector", {
			seekBar : "#jquery_jplayer_" + id + " .jp-seek-bar" + next
		});
		$("#jquery_jplayer_" + id).jPlayer("option", "cssSelector", {
			playBar : "#jquery_jplayer_" + id + " .jp-play-bar" + next
		});
		$("#jquery_jplayer_" + id).jPlayer("play", 0);
	});
	// Start playing the first segment on playclick
	// IF we have segments.
	if($('.jp-seek-bar' + current).children(".found-segment").size() > 0) {
		$("#jp_container_" + id + " .jp-play").click(function(e) {
			var audio = $("#jquery_jplayer_" + id).data("jPlayer");
			var playhead = audio.status.currentPercentAbsolute;
			
			if(current == 0 && playhead <= 1) {
				var newPos = $(".found-segment_0_0").attr('start');
					newPos = parseFloat(newPos);	
					
					//Check if the platform is the iPad
					if(isiPad ){
						var x = 0;				
							$("#jquery_jplayer_" + id).bind($.jPlayer.event.loadeddata, function(event) {				
						timerId = setInterval(function () {
							$("#jquery_jplayer_" + id).jPlayer("play",newPos);
							x++;
							if(x > 4){ clearInterval(timerId);
								$("#jquery_jplayer_" + id).unbind($.jPlayer.event.loadeddata);
							 };
						}, 50);
						});
					}else $("#jquery_jplayer_" + id).jPlayer("play",newPos);
		}
	});
}
	/*Jump to next file*/
	$(".jp-next").click(function(e) {
		var numsegments = $('.jp-seek-bar' + current).children(".found-segment").size();
		var more = true;

		//Current track has segments
		if(more == true && numsegments > 0) {
			var audio = $("#jquery_jplayer_" + id).data("jPlayer");
			var playhead = ((audio.status.currentPercentAbsolute / 100) * $(".seek-bar").width()) + $(".seek-bar").offset().left;

			for(var i = 0; i < numsegments; i++) {
				if(playhead < $(".found-segment_" + current + "_" + i).offset().left) {
					var newPos = $(".found-segment_" + current + "_" + i).attr('start');
					newPos = parseFloat(newPos);
		
				/*	if(isiPad ){
						var x = 0;			
						timerId = setInterval(function () {
							$("#jquery_jplayer_" + id).jPlayer("play",newPos);
							x++;				
							if(x > 0 ){ clearInterval(timerId);};
						}, 50);
					}else */
					$("#jquery_jplayer_" + id).jPlayer("play",newPos);
					return false;
				} else {
					more = false;
				}
			}
		}
		//if no more segments found in current track
		if(more == false || numsegments == 0) {
			next += 1; (next == listlength) ? next = 0 : next = next;
			current = next;
			last = current;
			var nextsegments = $('.jp-seek-bar' + current).children(".found-segment").size();

			if(nextsegments == 0) {
				var nextPos = 0;
			} else {
					var nextPos = $(".found-segment_" + current + "_0").attr('start');
					nextPos = parseFloat(nextPos);
			
				//Get the segments location in %
			}

			$("#jquery_jplayer_" + id).jPlayer("setMedia", {
				mp3 : $(".song" + next).attr("href"),
				oga : $(".song" + next).attr("data-ogg")
			});
			
			$("#jquery_jplayer_" + id).jPlayer("option", "cssSelector", {
				seekBar : " .jp-seek-bar" + next
			});
			$("#jquery_jplayer_" + id).jPlayer("option", "cssSelector", {
				playBar : " .jp-play-bar" + next
			});
			
			//Check if the platform is the iPad, Add a timeout so it moves the playhead correctly
			if(isiPad ){	
				var x = 0;
				
						$("#jquery_jplayer_" + id).bind($.jPlayer.event.loadeddata, function(event) {				
						timerId = setInterval(function () {
							var audio = $("#jquery_jplayer_" + id).data("jPlayer");
							var playhead = audio.status.currentPercentAbsolute;	
								
							setTimeout(function(){
							$("#jquery_jplayer_" + id).jPlayer("play",nextPos);
							},2500);
							
							x++;
							if(x > 1 || playhead >= 1){ clearInterval(timerId);
								$("#jquery_jplayer_" + id).unbind($.jPlayer.event.loadeddata);
							 };
						}, 50);
						});
				
					}
			else $("#jquery_jplayer_" + id).jPlayer("play", nextPos);
		

			//Highlight currently playing
			$(".song").each(function() {
				$(this).parent().parent().addClass("item");
				$(this).parent().parent().removeClass("playing");
			});
			$(".song" + next).parent().parent().removeClass("item");
			$(".song" + next).parent().parent().addClass("playing");

		}
	});
	/*Jump to previous file*/
	$(".jp-previous").click(function(e) {
		var numsegments = $('.jp-seek-bar' + current).children(".found-segment").size();
		var more = true;

		//Current track has segments
		if(more == true && numsegments > 0) {
			var audio = $("#jquery_jplayer_" + id).data("jPlayer");
			var playhead = ((audio.status.currentPercentAbsolute / 100) * $(".seek-bar").width()) + $(".seek-bar").offset().left;

			for(var i = numsegments - 1; i >= 0; i--) {
				if(playhead > $(".found-segment_" + current + "_" + i).offset().left && playhead < ($(".found-segment_" + current + "_" + i).offset().left + $(".found-segment_" + current + "_" + i).width())) {
					var fsl = $(".found-segment_" + current + "_" + i).offset().left;
					var sumseg = $(".found-segment_" + current + "_" + i).offset().left + $(".found-segment_" + current + "_" + i).width();
					var previous = i - 1;
					if(previous >= 0) {
						var newPos = $(".found-segment_" + current + "_" + previous).attr('start');
						newPos = parseFloat(newPos);
							
						/*if(isiPad ){
							var x = 0;				
						timerId = setInterval(function () {
							$("#jquery_jplayer_" + id).jPlayer("play",newPos);
							x++;
							if(x > 1) clearInterval(timerId);
						}, 50);
					}
					else */
					$("#jquery_jplayer_" + id).jPlayer("play",newPos);
						return false;
					} else {
						more = false;
					}
				} else if(playhead > ($(".found-segment_" + current + "_" + i).offset().left + $(".found-segment_" + current + "_" + i).width())) {
					var newPos = $(".found-segment_" + current + "_" + i).attr('start');
					newPos = parseFloat(newPos);
								
					/*if(isiPad ){	
						var x = 0;			
						timerId = setInterval(function () {
							$("#jquery_jplayer_" + id).jPlayer("play",newPos);
							x++;
							if(x > 1) clearInterval(timerId);
						}, 50);
					}
					else */
					$("#jquery_jplayer_" + id).jPlayer("play",newPos);
					return false;
				} else {
					more = false;
				}
			}
		}
		//No more segments found in current track
		if(more == false || numsegments == 0) {
			prev = current - 1;
			
			if(prev < 0) {
				prev = 0;
				return false;
			} else {
				prev = prev;
				
			}
			current = prev;
			last = current;		
			next = current;

			var prevsegments = $('.jp-seek-bar' + current).children(".found-segment").size();

			if(prevsegments == 0) {
				var prevPos = 0;
			} else {
				var prevPos = $(".found-segment_" + current + "_" + (prevsegments - 1)).attr('start');
					prevPos = parseFloat(prevPos);
			
			}

			$("#jquery_jplayer_" + id).jPlayer("setMedia", {
				mp3 : $(".song" + current).attr("href"),
				oga : $(".song" + current).attr("data-ogg")
			});
			
			$("#jquery_jplayer_" + id).jPlayer("load");
			
			$("#jquery_jplayer_" + id).jPlayer("option", "cssSelector", {
				seekBar : ".jp-seek-bar" + current
			});
			$("#jquery_jplayer_" + id).jPlayer("option", "cssSelector", {
				playBar : ".jp-play-bar" + current
			});
			
			
			//Check if the platform is the iPad, Add a timeout so it moves the playhead correctly
			if(isiPad ){		
				var x = 0;
			
						$("#jquery_jplayer_" + id).bind($.jPlayer.event.loadeddata, function(event) {				
						timerId = setInterval(function () {
							var audio = $("#jquery_jplayer_" + id).data("jPlayer");
							var playhead = audio.status.currentPercentAbsolute;		
							
							setTimeout(function(){
							$("#jquery_jplayer_" + id).jPlayer("play",prevPos);
							},2500);
							
							x++;
							if(x > 1 || playhead >= 1){ clearInterval(timerId);
								$("#jquery_jplayer_" + id).unbind($.jPlayer.event.loadeddata);
							 };
						}, 50);
						});
				
					}
			else $("#jquery_jplayer_" + id).jPlayer("play",prevPos);
			
			//Highlight currently playing
			$(".song").each(function() {
				$(this).parent().parent().addClass("item");
				$(this).parent().parent().removeClass("playing");
			});
			$(".song" + prev).parent().parent().removeClass("item");
			$(".song" + prev).parent().parent().addClass("playing");
		}
	});
	/*Times*/
	//$("#jquery_jplayer_" + id).bind($.jPlayer.event.timeupdate, function(event) {
		setInterval(function() {
		var audio = $("#jquery_jplayer_" + id).data("jPlayer");
		var elapsed = audio.status.currentPercentAbsolute;
		
		$(".jp-play-bar" + current).css({
			width : elapsed + "%"
		});
		$(".playhead_" + current).css({
			left : elapsed + "%"
		});
		/*Current time and duration*/
		var rem = parseInt(audio.status.duration - audio.status.currentTime, 10), pos = (audio.status.currentTime / audio.status.duration) * 100, mins = Math.floor(rem / 60, 10), secs = rem - mins * 60, totalSeconds = Math.floor(audio.status.currentTime), currentMinutes = Math.floor(totalSeconds / 60), currentSeconds = Math.floor(totalSeconds % 60);
		$(".current-time" + current).text(currentMinutes + ':' + (currentSeconds < 10 ? '0' + currentSeconds : currentSeconds));
	},50);

}

/**
 * nmcDropDown plugin - v1.0.5
 * Author: Eli Van Zoeren
 * Copyright (c) 2009 New Media Campaigns
 * http://www.newmediacampaigns.com
 * ---------------------------------------------
 * Usage: $('#nav').nmcDropDown({[options]});
 *
 * See below for configuration options. If you
 * don't pass in any options, the plugin will
 * Use reasonable defaults.
 *
 * Dependancy: jQuery 1.2.6+
 * Optional depenancy: hoverIntent plugin
 *   http://cherne.net/brian/resources/jquery.hoverIntent.html
 **/
(function($) {

	$.fn.nmcDropDown = function(options) {

		// build main options before element iteration
		var opts = $.extend({}, $.fn.nmcDropDown.defaults, options);

		// iterate each matched element
		return this.each(function() {
			var menu = $(this);
			submenus = menu.children('li:has(' + opts.submenu_selector + ')');

			if(opts.fix_IE) {
				// Fix IE 6+7 z-index bug
				menu.css('z-index', 51).parents().each(function(i) {
					if($(this).css('position') == 'relative') {
						$(this).css('z-index', (i + 52));
					}
				});
				submenus.children(opts.submenu_selector).css('z-index', 50);
			}

			// Function that is called to show the submenu
			over = function(e) {
				$(e || this).addClass(opts.active_class).children(opts.submenu_selector).animate(opts.show, opts.show_speed);
				return false;
			}
			// Function that is called to hide the submenu
			out = function(e) {
				$(e || this).removeClass(opts.active_class).children(opts.submenu_selector).animate(opts.hide, opts.hide_speed);
				return false;
			}
			// Show and hide the sub-menus
			if(opts.trigger == 'click') {
				submenus.click(function(event) {
					if($(event.target).parent().get(0) == this) {
						event.preventDefault();
						$(this).hasClass(opts.active_class) ? out(this) : over(this);
					}
				}).children(opts.submenu_selector).hide();
			} else if($().hoverIntent) {
				submenus.hoverIntent({
					interval : opts.show_delay,
					over : over,
					timeout : opts.hide_delay,
					out : out
				}).children(opts.submenu_selector).hide();
			} else {
				submenus.hover(over, out).children(opts.submenu_selector).hide();
			}
		});
	};
	// Default options
	$.fn.nmcDropDown.defaults = {
		trigger : 'hover', // Event to show and hide sub-menu - hover or click
		active_class : 'open', // Class to give open menu items
		submenu_selector : 'ul', // The element immediately below the <li> containing the sub-menu
		show : {
			opacity : 'show'
		}, // Effect(s) to use when showing the sub-menu
		show_speed : 300, // Speed of the show transition
		show_delay : 50, // Delay before the sub-menu is show (requires HoverIntent)
		hide : {
			opacity : 'hide'
		}, // Effect(s) to use when hiding the sub-menu
		hide_speed : 200, // Speed of the hide transition
		hide_delay : 100, // Delay before the sub-menu is hidden (requires HoverIntent)
		fix_IE : true                // IE 6 and 7 have problems with z-indexes. This tries to fix them
	};

})(jQuery);
